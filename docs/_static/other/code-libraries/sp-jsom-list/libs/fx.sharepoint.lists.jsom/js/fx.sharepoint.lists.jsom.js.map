{"version":3,"sources":["Lists.Typed/src-init/index.js","Lists.Typed/src-init/class-init.ts","Lists.Typed/src/utils/FunctionName.ts","Lists.Typed/src/extensions/StringExtensions.ts","Lists.Typed/src/factory/AppFactory.ts","Lists.Typed/src/angular/AppContext.ts","Lists.Typed/src/angular/FxListService.ts","Lists.Typed/src/angular/Bootstrap.ts","Lists.Typed/src/caml/CamlElement.ts","Lists.Typed/src/caml/query/base/LogicalJoin.ts","Lists.Typed/src/caml/query/And.ts","Lists.Typed/src/caml/query/Or.ts","Lists.Typed/src/caml/query/base/ComparisonOperator.ts","Lists.Typed/src/caml/query/base/UnaryOperator.ts","Lists.Typed/src/caml/query/base/BinaryOperator.ts","Lists.Typed/src/caml/query/base/SingleValueBinaryOperator.ts","Lists.Typed/src/caml/query/base/MultipleValueBinaryOperator.ts","Lists.Typed/src/core/list/ListBase.ts","Lists.Typed/src/core/list/List.ts","Lists.Typed/src/core/field/type/ListField.ts","Lists.Typed/src/core/field/type/ListFieldMultiChoice.ts","Lists.Typed/src/core/field/type/ListFieldChoice.ts","Lists.Typed/src/exception/Exception.ts","Lists.Typed/src/factory/exception/FieldConfigCreationException.ts","Lists.Typed/src/core/list/exception/DefaultFieldConfigException.ts","Lists.Typed/src/core/field/parsing/FieldsConfigParser.ts","Lists.Typed/src/core/field/parsing/MergedFieldsConfigParser.ts","Lists.Typed/src/core/field/parsing/DefaultFieldsConfigParser.ts","Lists.Typed/src/core/field/parsing/UserFieldsConfigParser.ts","Lists.Typed/src/infrastructure/Queue[T].ts","Lists.Typed/src/core/context/operation/PendingQueue.ts","Lists.Typed/src/core/context/operation/CommitOperation[TItem].ts","Lists.Typed/src/core/context/operation/ListItemUpdateCommitOperation.ts","Lists.Typed/src/core/context/session/SessionContext.ts","Lists.Typed/src/core/context/session/GetListItemSessionContext.ts","Lists.Typed/src/index.js","Lists.Typed/src/caml/ICamlElement.ts","Lists.Typed/src/caml/IElementAttrs.ts","Lists.Typed/src/caml/IElementContent.ts","Lists.Typed/src/core/IServiceContext.ts","Lists.Typed/src/core/ServiceContext.ts","Lists.Typed/src/extensions/LodashExtensions.js","Lists.Typed/src/factory/IAppFactory.ts","Lists.Typed/src/factory/ILoggerCreationContext.ts","Lists.Typed/src/infrastructure/ICloneable.ts","Lists.Typed/src/infrastructure/IQueue[T].ts","Lists.Typed/src/logger/ILogger.ts","Lists.Typed/src/logger/ILogOptions.ts","Lists.Typed/src/logger/Logger.ts","Lists.Typed/src/utils/TypeGuard.ts","Lists.Typed/src/caml/list/FieldRef.ts","Lists.Typed/src/caml/list/IFieldRefAttrs.ts","Lists.Typed/src/caml/list/IFieldRefContent.ts","Lists.Typed/src/caml/list/IJoinsAttrs.ts","Lists.Typed/src/caml/list/IJoinsContent.ts","Lists.Typed/src/caml/list/IQueryAttrs.ts","Lists.Typed/src/caml/list/IQueryContent.ts","Lists.Typed/src/caml/list/IRowLimitAttrs.ts","Lists.Typed/src/caml/list/IRowLimitContent.ts","Lists.Typed/src/caml/list/IViewAttrs.ts","Lists.Typed/src/caml/list/IViewContent.ts","Lists.Typed/src/caml/list/IViewFieldsAttrs.ts","Lists.Typed/src/caml/list/IViewFieldsContent.ts","Lists.Typed/src/caml/list/Joins.ts","Lists.Typed/src/caml/list/Query.ts","Lists.Typed/src/caml/list/RowLimit.ts","Lists.Typed/src/caml/list/View.ts","Lists.Typed/src/caml/list/ViewFields.ts","Lists.Typed/src/caml/view/IProjectedFieldsAttrs.ts","Lists.Typed/src/caml/view/IProjectedFieldsContent.ts","Lists.Typed/src/caml/view/ProjectedFields.ts","Lists.Typed/src/caml/query/Eq.ts","Lists.Typed/src/caml/query/FieldRef.ts","Lists.Typed/src/caml/query/GroupBy.ts","Lists.Typed/src/caml/query/IAndAttrs.ts","Lists.Typed/src/caml/query/IAndContent.ts","Lists.Typed/src/caml/query/IEqAttrs.ts","Lists.Typed/src/caml/query/IEqContent.ts","Lists.Typed/src/caml/query/IFieldRefAttrs.ts","Lists.Typed/src/caml/query/IFieldRefContent.ts","Lists.Typed/src/caml/query/IGroupByAttrs.ts","Lists.Typed/src/caml/query/IGroupByContent.ts","Lists.Typed/src/caml/query/IInAttrs.ts","Lists.Typed/src/caml/query/IInContent.ts","Lists.Typed/src/caml/query/In.ts","Lists.Typed/src/caml/query/IOrAttrs.ts","Lists.Typed/src/caml/query/IOrContent.ts","Lists.Typed/src/caml/query/IOrderByAttrs.ts","Lists.Typed/src/caml/query/IOrderByContent.ts","Lists.Typed/src/caml/query/ITodayAttrs.ts","Lists.Typed/src/caml/query/ITodayContent.ts","Lists.Typed/src/caml/query/IValueAttrs.ts","Lists.Typed/src/caml/query/IValueContent.ts","Lists.Typed/src/caml/query/IValuesAttrs.ts","Lists.Typed/src/caml/query/IValuesContent.ts","Lists.Typed/src/caml/query/IWhereAttrs.ts","Lists.Typed/src/caml/query/IWhereContent.ts","Lists.Typed/src/caml/query/OrderBy.ts","Lists.Typed/src/caml/query/Today.ts","Lists.Typed/src/caml/query/Value.ts","Lists.Typed/src/caml/query/Values.ts","Lists.Typed/src/caml/query/Where.ts","Lists.Typed/src/core/field/IListFieldCollection.ts","Lists.Typed/src/core/item/IDeferValue.ts","Lists.Typed/src/core/item/IListItem.ts","Lists.Typed/src/core/item/IListItemCollection.ts","Lists.Typed/src/core/item/IListItemPrivateData.ts","Lists.Typed/src/core/item/ListItem.ts","Lists.Typed/src/core/item/ListItemPrivateData.ts","Lists.Typed/src/core/item/ListItemState.ts","Lists.Typed/src/core/item/TItemFieldData.ts","Lists.Typed/src/core/list/IList.ts","Lists.Typed/src/core/list/IListOperationOptions.ts","Lists.Typed/src/core/list/TListOperationResult.ts","Lists.Typed/src/caml/query/base/IBinaryOperatorAttrs.ts","Lists.Typed/src/caml/query/base/IBinaryOperatorContent.ts","Lists.Typed/src/caml/query/base/IComparisonOperatorAttrs.ts","Lists.Typed/src/caml/query/base/IComparisonOperatorContent.ts","Lists.Typed/src/caml/query/base/ILogicalJoinAttrs.ts","Lists.Typed/src/caml/query/base/ILogicalJoinContent.ts","Lists.Typed/src/caml/query/base/IMultipleValueBinaryOperatorAttrs.ts","Lists.Typed/src/caml/query/base/IMultipleValueBinaryOperatorContent.ts","Lists.Typed/src/caml/query/base/ISingleValueBinaryOperatorAttrs.ts","Lists.Typed/src/caml/query/base/ISingleValueBinaryOperatorContent.ts","Lists.Typed/src/caml/query/base/IUnaryOperatorAttrs.ts","Lists.Typed/src/caml/query/base/IUnaryOperatorContent.ts","Lists.Typed/src/core/context/operation/ICommitOperation[TItem].ts","Lists.Typed/src/core/context/operation/IPendingQueue.ts","Lists.Typed/src/core/context/session/IGetListItemSessionContext.ts","Lists.Typed/src/core/context/session/ISessionContext.ts","Lists.Typed/src/core/context/session/ISessionContextManager.ts","Lists.Typed/src/core/context/session/SessionContextManager.ts","Lists.Typed/src/core/field/config/FieldConfig.ts","Lists.Typed/src/core/field/config/IFieldConfig.ts","Lists.Typed/src/core/field/config/IFieldConfigLiteral.ts","Lists.Typed/src/core/field/config/INamedFieldConfigLiteral.ts","Lists.Typed/src/core/field/parsing/FieldConfigMode.ts","Lists.Typed/src/core/field/parsing/IDefaultFieldsConfigParser.ts","Lists.Typed/src/core/field/parsing/IFieldParsingHandler.ts","Lists.Typed/src/core/field/parsing/IFieldsConfigParser.ts","Lists.Typed/src/core/field/parsing/IMergedFieldsConfigParser.ts","Lists.Typed/src/core/field/parsing/IUserFieldsConfigParser.ts","Lists.Typed/src/core/field/utils/FieldUtils.ts","Lists.Typed/src/core/field/type/IListField.ts","Lists.Typed/src/core/field/type/IListFieldBoolean.ts","Lists.Typed/src/core/field/type/IListFieldChoice.ts","Lists.Typed/src/core/field/type/IListFieldDateTime.ts","Lists.Typed/src/core/field/type/IListFieldLookup.ts","Lists.Typed/src/core/field/type/IListFieldMultiChoice.ts","Lists.Typed/src/core/field/type/IListFieldMultiLineText.ts","Lists.Typed/src/core/field/type/IListFieldNumber.ts","Lists.Typed/src/core/field/type/IListFieldText.ts","Lists.Typed/src/core/field/type/IListFieldUniqueId.ts","Lists.Typed/src/core/field/type/IListFieldUrl.ts","Lists.Typed/src/core/field/type/IListFieldUser.ts","Lists.Typed/src/core/field/type/ListFieldBoolean.ts","Lists.Typed/src/core/field/type/ListFieldDateTime.ts","Lists.Typed/src/core/field/type/ListFieldLookup.ts","Lists.Typed/src/core/field/type/ListFieldMultiLineText.ts","Lists.Typed/src/core/field/type/ListFieldNumber.ts","Lists.Typed/src/core/field/type/ListFieldText.ts","Lists.Typed/src/core/field/type/ListFieldUniqueId.ts","Lists.Typed/src/core/field/type/ListFieldUrl.ts","Lists.Typed/src/core/field/type/ListFieldUser.ts","Lists.Typed/src/core/field/value/IListFieldLookupValue.ts","Lists.Typed/src/core/field/value/IListFieldLookupValuePrivateData.ts","Lists.Typed/src/core/field/value/IListFieldUrlValue.ts","Lists.Typed/src/core/field/value/IListFieldUrlValuePrivateData.ts","Lists.Typed/src/core/field/value/IListFieldUserValue.ts","Lists.Typed/src/core/field/value/IListFieldUserValuePrivateData.ts","Lists.Typed/src/core/field/value/ListFieldLookupValue.ts","Lists.Typed/src/core/field/value/ListFieldLookupValuePrivateData.ts","Lists.Typed/src/core/field/value/ListFieldUrlValue.ts","Lists.Typed/src/core/field/value/ListFieldUrlValuePrivateData.ts","Lists.Typed/src/core/field/value/ListFieldUserValue.ts","Lists.Typed/src/core/field/value/ListFieldUserValuePrivateData.ts","Lists.Typed/src/core/list/config/IListConfig.ts","Lists.Typed/src/core/list/config/IListConfigLiteral.ts","Lists.Typed/src/core/list/config/ListConfig.ts","Lists.Typed/src/core/list/config/TFieldConfig.ts","Lists.Typed/src/core/list/config/TFieldConfigLiteral.ts","Lists.Typed/src/core/list/config/TFieldHashConfig.ts","Lists.Typed/src/core/list/config/TIndexedFieldConfigLiteral.ts","Lists.Typed/src/core/list/config/TKeyedFieldConfigLiteral.ts","Lists.Typed/src-finalize/index.js","Lists.Typed/src-finalize/class-finalize.ts"],"names":[],"mappings":"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","file":"fx.sharepoint.lists.jsom.js","sourcesContent":["","namespace Fx {\r\n\r\n\tconst queue: (() => void)[] = [];\r\n\r\n\texport function initClass(fn: () => void) {\r\n\t\tqueue.push(fn);\r\n\t}\r\n\r\n\texport function finalizeClass() {\r\n\t\t_.forEach(queue, fn => fn());\r\n\t}\r\n}\r\n\r\nfunction logObjProps(obj: any): void {\r\n\r\n\t_.chain(obj)\r\n\t\t.functionsIn()\r\n\t\t.orderBy(fn => fn.toLowerCase())\r\n\t\t//.filter(fn => fn === \"get_displayName\" || fn === \"get_hasUniqueRoleAssignments\")\r\n\t\t.forEach(fn => {\r\n\t\t\ttry {\r\n\t\t\t\tconsole.log(fn + \":\", (obj as any)[fn]());\r\n\t\t\t} catch (e) {\r\n\t\t\t\tconsole.info(fn + \":\", e);\r\n\t\t\t}\r\n\t\t})\r\n\t\t.commit();\r\n}\r\n\r\nfunction logItemFields(item: any): void {\r\n\r\n\t_.chain(item.$list.fields as Fx.SharePoint.Client.IListField[])\r\n\t\t.map(field => field.internalName)\r\n\t\t.orderBy(name => name.toLowerCase())\r\n\t\t.forEach(name => {\r\n\t\t\ttry {\r\n\t\t\t\tconsole.log(name + \":\", item.$item.get_item(name));\r\n\t\t\t} catch (e) {\r\n\t\t\t\tconsole.info(name + \":\", e);\r\n\t\t\t}\r\n\t\t})\r\n\t\t.commit();\r\n}\r\n\r\nfunction displayGettableFields(list: any) {\r\n\r\n\tlist.initPromise.then(() => {\r\n\t\tconst fieldNames = _\r\n\t\t\t.chain(list.fields as Fx.SharePoint.Client.IListField[])\r\n\t\t\t.map(field => field.internalName)\r\n\t\t\t.orderBy(name => name.toLowerCase())\r\n\t\t\t.value();\r\n\r\n\t\t_.map(fieldNames, fieldName => {\r\n\t\t\tvar query = new SP.CamlQuery();\r\n\t\t\tquery.set_viewXml(`\r\n\t\t\t\t<View>\r\n\t\t\t\t\t<ViewFields>\r\n\t\t\t\t\t\t<FieldRef Name=\"${fieldName}\" />\r\n\t\t\t\t\t</ViewFields>\r\n\t\t\t\t</View>\r\n\t\t\t`);\r\n\t\t\t\r\n\t\t\tvar item = list.splist.getItems(query);\r\n\t\t\tlist.clientContext.load(item);\r\n\r\n\t\t\treturn list.serviceContext.commitChanges()\r\n\t\t\t\t.then(() => {\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tconsole.log(`${fieldName}:`, item.get_data()[0].get_item(fieldName));\r\n\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\tconsole.log(`${fieldName}:`, e);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t});\r\n\t});\r\n}","// https://raw.githubusercontent.com/JamesMGreene/Function.name/master/Function.name.js\r\n\r\ninterface Function {\r\n    /**\r\n     * Get the name of this function.\r\n     */\r\n    name: string;\r\n}\r\n\r\nnamespace Fx.SharePoint.Client {\r\n\r\n    const fnNamePrefixRegex = /^[\\S\\s]*?function\\s*/;\r\n    const fnNameSuffixRegex = /[\\s\\(\\/][\\S\\s]+$/;\r\n\r\n    function _name() {\r\n        let name = \"\";\r\n        if (this === Function || this === Function.prototype.constructor) {\r\n            name = \"Function\";\r\n        }\r\n        else if (this !== Function.prototype) {\r\n            name = (\"\" + this).replace(fnNamePrefixRegex, \"\").replace(fnNameSuffixRegex, \"\");\r\n        }\r\n        return name;\r\n    }\r\n\r\n    // Inspect the polyfill-ability of this browser\r\n    var needsPolyfill = !(\"name\" in Function.prototype && \"name\" in (() => { }));\r\n    var canDefineProp = typeof Object.defineProperty === \"function\" &&\r\n        (() => {\r\n            let result: boolean;\r\n            try {\r\n                Object.defineProperty(Function.prototype, \"_xyz\", {\r\n                    get() {\r\n                        return \"blah\";\r\n                    },\r\n                    configurable: true\r\n                });\r\n                result = (Function.prototype as any)._xyz === \"blah\";\r\n                delete (Function.prototype as any)._xyz;\r\n            }\r\n            catch (e) {\r\n                result = false;\r\n            }\r\n            return result;\r\n        })();\r\n\r\n\r\n    // Add the \"private\" property for testing, even if the real property can be polyfilled\r\n    //Function.prototype._name = _name;\r\n\r\n    // Polyfill it!\r\n    if (canDefineProp && needsPolyfill) {\r\n        Object.defineProperty(Function.prototype, \"name\", {\r\n            get: _name\r\n        });\r\n    }\r\n}","namespace Fx.SharePoint.Client {\r\n    //#region String.format\r\n\r\n    if (!String.format) {\r\n        String.format = (format: string, ...args: any[]) => {\r\n            return format.replace(\r\n                /{(\\d+)}/g,\r\n                (match, number) => (\r\n                    typeof args[number] != \"undefined\"\r\n                        ? args[number]\r\n                        : match\r\n                )\r\n            );\r\n        }\r\n    }\r\n}","namespace Fx.SharePoint.Client {\r\n\r\n    export class AppFactory implements IAppFactory {\r\n\r\n        /**\r\n         * \r\n         * @param serverRelativeUrl\r\n         */\r\n        createServiceContext(serverRelativeUrl?: string): IServiceContext {\r\n            return new ServiceContext(serverRelativeUrl);\r\n        }\r\n\r\n        /**\r\n         * \r\n         * @param config\r\n         * @param serviceContext\r\n         */\r\n        createList(config: IListConfigLiteral, serviceContext: IServiceContext): IList {\r\n            return new List(config, serviceContext);\r\n        }\r\n\r\n        /**\r\n         * \r\n         * @param spItem\r\n         * @param list\r\n         */\r\n        createListItem(spItem: SP.ListItem, list: IList): ng.IPromise<IListItem> {\r\n            const listItem = new ListItem(spItem, list);\r\n            return listItem.$init().then(() => listItem);\r\n        }\r\n\r\n        /**\r\n         * \r\n         * @param config\r\n         * @param list\r\n         */\r\n        createListConfig(config: IListConfigLiteral, list: IList): IListConfig {\r\n            return new ListConfig(config, list);\r\n        }\r\n\r\n        /**\r\n         * \r\n         * @param creationContext\r\n         */\r\n        createLogger(creationContext: ILoggerCreationContext): ILogger {\r\n            return new Logger(creationContext);\r\n        }\r\n\r\n        /**\r\n         * \r\n         * @param spItem\r\n         * @param list\r\n         */\r\n        createListItemPrivateData(spItem: SP.ListItem, list: IList): IListItemPrivateData {\r\n            return new ListItemPrivateData(spItem, list);\r\n        }\r\n\r\n        /**\r\n         * \r\n         */\r\n        createPendingQueue(): IPendingQueue {\r\n            return new PendingQueue();\r\n        }\r\n\r\n        createPendingOperation(listItem: IListItem): ICommitOperation<IListItem>;\r\n        //..\r\n        createPendingOperation(item: IListItem): ICommitOperation<IListItem> {\r\n            if (item instanceof ListItem) {\r\n                return new Fx.SharePoint.Client.ListItemUpdateCommitOperation(item);\r\n            }\r\n\r\n            throw new Error(\r\n                `Internal error: item type is not supported for creating pending operation. Got ${item}.`\r\n            );\r\n        }\r\n\r\n        createSessionContextManager(serviceContext: IServiceContext): ISessionContextManager {\r\n            return new SessionContextManager(serviceContext);\r\n        }\r\n\r\n        createGetListItemSessionContext(\r\n            serviceContext: IServiceContext,\r\n            listItem: IListItem\r\n\r\n        ): IGetListItemSessionContext {\r\n\r\n            return new GetListItemSessionContext(serviceContext, listItem);\r\n        }\r\n\r\n        //#region List fields\r\n\r\n        /**\r\n         * \r\n         * @param spField\r\n         * @param fieldConfig\r\n         * @param list\r\n         */\r\n        createListField(spField: SP.Field, fieldConfig: IFieldConfig, list: IList): IListField {\r\n            switch (spField.get_fieldTypeKind()) {\r\n                case SP.FieldType.text:\r\n                    return new ListFieldText(spField, fieldConfig, list);\r\n                case SP.FieldType.note:\r\n                    return new ListFieldMultiLineText(spField, fieldConfig, list);\r\n                case SP.FieldType.dateTime:\r\n                    return new ListFieldDateTime(spField, fieldConfig, list);\r\n                case SP.FieldType.number:\r\n                    return new ListFieldNumber(spField, fieldConfig, list);\r\n                case SP.FieldType.boolean:\r\n                    return new ListFieldBoolean(spField, fieldConfig, list);\r\n                case SP.FieldType.choice:\r\n                    return new ListFieldChoice(spField, fieldConfig, list);\r\n                case SP.FieldType.multiChoice:\r\n                    return new ListFieldMultiChoice(spField, fieldConfig, list);\r\n                case SP.FieldType.lookup:\r\n                    return (() => {\r\n                        const isUniqueId = spField.get_internalName() === \"UniqueId\" && spField.get_fromBaseType();\r\n                        return isUniqueId\r\n                            ? new ListFieldUniqueId(spField, fieldConfig, list)\r\n                            : new ListFieldLookup(spField, fieldConfig, list);\r\n                    })();\r\n                case SP.FieldType.user:\r\n                    return new ListFieldUser(spField, fieldConfig, list);\r\n                case SP.FieldType.URL:\r\n                    return new ListFieldUrl(spField, fieldConfig, list);\r\n                default:\r\n                    return new ListField(spField, fieldConfig, list);\r\n            }\r\n        }\r\n\r\n        createListFieldLookupValue(lookupValue: SP.FieldLookupValue,\r\n            lookupField: IListFieldLookup,\r\n            listItem: IListItem\r\n        ): IListFieldLookupValue {\r\n\r\n            return new ListFieldLookupValue(lookupValue, lookupField, listItem);\r\n        }\r\n\r\n        createListFieldLookupValuePrivateData(\r\n            lookupValue: SP.FieldLookupValue,\r\n            lookupField: IListFieldLookup,\r\n            listItem: IListItem\r\n        ): IListFieldLookupValuePrivateData {\r\n\r\n            return new ListFieldLookupValuePrivateData(lookupValue, lookupField, listItem);\r\n        }\r\n\r\n        createListFieldUserValue(\r\n            userValue: SP.FieldUserValue,\r\n            userField: IListFieldUser,\r\n            listItem: IListItem\r\n        ): IListFieldUserValue {\r\n\r\n            return new ListFieldUserValue(userValue, userField, listItem);\r\n        }\r\n\r\n        createListFieldUserValuePrivateData(\r\n            userValue: SP.FieldUserValue,\r\n            userField: IListFieldUser,\r\n            listItem: IListItem\r\n        ): IListFieldUserValuePrivateData {\r\n\r\n            return new ListFieldUserValuePrivateData(userValue, userField, listItem);\r\n        }\r\n\r\n        createListFieldUrlValue(\r\n            urlValue: SP.FieldUrlValue,\r\n            urlField: IListFieldUrl,\r\n            listItem: IListItem\r\n        ): IListFieldUrlValue {\r\n\r\n            return new ListFieldUrlValue(urlValue, urlField, listItem);\r\n        }\r\n\r\n        createListFieldUrlValuePrivateData(\r\n            urlValue: SP.FieldUrlValue,\r\n            urlField: IListFieldUrl,\r\n            listItem: IListItem\r\n        ): IListFieldUrlValuePrivateData {\r\n\r\n            return new ListFieldUrlValuePrivateData(urlValue, urlField, listItem);\r\n        }\r\n\r\n        //#endregion - List fields\r\n\r\n        //#region Field configs\r\n\r\n        /**\r\n         * \r\n         * @param config\r\n         * @param listConfig\r\n         */\r\n        createFieldConfig(config: INamedFieldConfigLiteral, listConfig: IListConfig): IFieldConfig {\r\n            return new FieldConfig(config, listConfig);\r\n        }\r\n\r\n        /**\r\n         * \r\n         * @param configLiteral\r\n         * @param listConfig\r\n         */\r\n        createSingleFieldConfig(configLiteral: any, listConfig: IListConfig): IFieldConfig {\r\n            if (_.isString(configLiteral)) {\r\n                return this.createFieldConfig({ name: configLiteral }, listConfig);\r\n            }\r\n\r\n            if (_.isObject(configLiteral)) {\r\n                return this.createFieldConfig(configLiteral, listConfig);\r\n            }\r\n\r\n            throw new FieldConfigCreationException(\r\n                `Expect field config is a string or an object, but got '${configLiteral}'.`\r\n            );\r\n        }\r\n\r\n        /**\r\n         * \r\n         */\r\n        createArrayFieldConfig(configLiteral: any, listConfig: IListConfig): IFieldConfig[] {\r\n            if (!configLiteral)\r\n                return [];\r\n\r\n            if (_.isArray(configLiteral))\r\n                return _.map(configLiteral, config => this.createSingleFieldConfig(config, listConfig));\r\n\r\n            throw new FieldConfigCreationException(\r\n                `Expect field config is an array, but got '${configLiteral}'.`\r\n            );\r\n        }\r\n\r\n        /**\r\n         * \r\n         */\r\n        createHashFieldConfig(configLiteral: any, listConfig: IListConfig): TFieldHashConfig {\r\n            //#region Validate\r\n\r\n            if (!_.isObjectLike(configLiteral)) {\r\n                throw new FieldConfigCreationException(\r\n                    `Expect field config is an object, but got '${configLiteral}'.`\r\n                );\r\n            }\r\n\r\n            //#endregion - Validate\r\n\r\n            const config: TFieldHashConfig = {};\r\n\r\n            _.forEach(configLiteral,\r\n                (value, key) => {\r\n\r\n                    if (typeof value === \"boolean\") {\r\n                        const configLiteral: INamedFieldConfigLiteral = {\r\n                            name: key,\r\n                            active: value\r\n                        };\r\n                        config[key] = this.createSingleFieldConfig(configLiteral, listConfig);\r\n                    } else if (_.isObjectLike(value)) {\r\n                        (value as INamedFieldConfigLiteral).name = key;\r\n                        config[key] = this.createSingleFieldConfig(value, listConfig);\r\n                    } else {\r\n                        throw new FieldConfigCreationException(\r\n                            `Expect field config is a boolean or an object, but got '${value}'.`,\r\n                            key\r\n                        );\r\n                    }\r\n                });\r\n\r\n            return config;\r\n        }\r\n\r\n        //#endregion - Field configs\r\n\r\n        //#region Field parsing\r\n\r\n        createMergedFieldsConfigParser(\r\n            spFields: SP.Field[],\r\n            fields: void | TFieldConfig,\r\n            list: IList,\r\n            defaultFieldsConfigParser: IDefaultFieldsConfigParser,\r\n            userFieldsConfigParser: IUserFieldsConfigParser\r\n        ): IMergedFieldsConfigParser {\r\n            return new MergedFieldsConfigParser(\r\n                spFields,\r\n                fields,\r\n                list,\r\n                defaultFieldsConfigParser,\r\n                userFieldsConfigParser\r\n            );\r\n        }\r\n\r\n        createUserFieldsConfigParser(\r\n            spFields: SP.Field[],\r\n            userFields: boolean | TFieldConfig,\r\n            list: IList\r\n        ): IUserFieldsConfigParser {\r\n            return new UserFieldsConfigParser(spFields, userFields, list);\r\n        }\r\n\r\n        createDefaultFieldsConfigParser(\r\n            spFields: SP.Field[],\r\n            defaultFields: boolean | TFieldConfig,\r\n            list: IList\r\n        ): IDefaultFieldsConfigParser {\r\n            return new DefaultFieldsConfigParser(spFields, defaultFields, list);\r\n        }\r\n\r\n        //#endregion - Field parsing\r\n\r\n        //#region SharePoint objects\r\n\r\n        createSPClientContext(serverRelativeUrl?: string): SP.ClientContext {\r\n            return new SP.ClientContext(serverRelativeUrl);\r\n        }\r\n\r\n        createSPCamlQuery(): SP.CamlQuery {\r\n            return new SP.CamlQuery();\r\n        }\r\n\r\n        createSPFieldUrlValue(url?: string, description?: string): SP.FieldUrlValue {\r\n            const urlValue = new SP.FieldUrlValue();\r\n\r\n            urlValue.set_url(url);\r\n            urlValue.set_description(description);\r\n\r\n            return urlValue;\r\n        }\r\n\r\n        createSPFieldUserValue(id?: number): SP.FieldUserValue {\r\n            const userValue = new SP.FieldUserValue();\r\n            userValue.set_lookupId(id);\r\n\r\n            return userValue;\r\n        }\r\n\r\n        //#endregion - SharePoint objects\r\n\r\n    }\r\n}","namespace Fx.SharePoint.Client {\r\n\r\n    export const $q = () => AppContext.current.$q;\r\n    export const $injector = () => AppContext.current.$injector;\r\n    export const factory = () => AppContext.current.factory;\r\n\r\n    /**\r\n     * Contains angular services.\r\n     */\r\n    export class AppContext {\r\n        static current: AppContext;\r\n\r\n        static $inject = [\r\n            \"$q\",\r\n            \"$http\",\r\n            \"$timeout\",\r\n            \"$injector\"\r\n        ];\r\n\r\n        constructor(\r\n            public $q: ng.IQService,\r\n            public $http: ng.IHttpService,\r\n            public $timeout: ng.ITimeoutService,\r\n            public $injector: ng.auto.IInjectorService\r\n        ) {\r\n            AppContext.current = this;\r\n        }\r\n\r\n        factory: IAppFactory = new AppFactory();\r\n    }\r\n}","\r\nnamespace Fx.SharePoint.Client {\r\n\r\n    export class FxListService {\r\n\r\n        //#region Constructor\r\n\r\n        static $inject = [\r\n            \"$fxList.appContext\"\r\n        ];\r\n\r\n        constructor(private context: AppContext) { }\r\n\r\n        //#endregion - Constructor\r\n\r\n        //#region Methods\r\n\r\n        createContext(serverRelativeUrl: string): IServiceContext {\r\n            return this.context.factory.createServiceContext(serverRelativeUrl);\r\n        }\r\n        \r\n        //#endregion - Methods\r\n    }\r\n}","namespace Fx.SharePoint.Client {\r\n    angular.module(\"fx.sharepoint.lists.jsom\", [])\r\n        .service(\"$fxList\", FxListService)\r\n        .service(\"$fxList.appContext\", AppContext);\r\n}","namespace Fx.SharePoint.Caml {\r\n\r\n    //#region Types\r\n\r\n    export type TConfig<TAttrs extends IElementAttrs, TContent extends IElementContent> = { attrs?: TAttrs } & TContent;\r\n    export type CElement = CamlElement<ICamlElement, IElementAttrs, IElementContent>;\r\n\r\n    //#endregion - Types\r\n\r\n    export abstract class CamlElement<\r\n\r\n            TParent extends ICamlElement,\r\n            TAttrs extends IElementAttrs,\r\n            TContent extends IElementContent\r\n\r\n        > implements ICamlElement {\r\n\r\n        //#region Constructor\r\n\r\n        constructor(config?: TConfig<TAttrs, TContent>) {\r\n            if (!config) return;\r\n\r\n            // Init attrs and content.\r\n            _.assignIn(this.attrs, config.attrs);\r\n            _.assignInWith(\r\n                this.content,\r\n                _.pickBy(config, (val, key) => key !== \"attrs\"),\r\n                (objValue: any, srcValue: any) => srcValue\r\n            );\r\n\r\n            // Set parent for children\r\n            _.forEach(this.content, child => {\r\n\r\n                if (child instanceof CamlElement) {\r\n                    child.parent = this;\r\n                }\r\n                else if (child instanceof Array) {\r\n                    _.forEach(child, subChild => subChild.parent = this);\r\n                }\r\n            });\r\n        }\r\n\r\n        //#endregion - Constructor\r\n\r\n        //#region Properties\r\n\r\n        protected get className(): string {\r\n            return (this as any).constructor.name;\r\n        }\r\n\r\n        //#endregion - Properties\r\n\r\n        //#region Public methods\r\n\r\n        toString(): string {\r\n\r\n            // Open tag\r\n            let s = `<${this.className}`;\r\n\r\n            // Attributes\r\n            _.forEach(this.attrs, (val, key) => s += ` ${_.upperFirst(key)}=\"${val}\"`);\r\n            s += \">\";\r\n\r\n            // Contents\r\n            _.forEach(this.content, child => {\r\n                if (_.isArray(child)) {\r\n                    _.forEach(child, subChild => s += subChild.toString());\r\n                } else {\r\n                    s += child.toString();\r\n                }\r\n            });\r\n\r\n            // End tag\r\n            s += `</${this.className}>`;\r\n\r\n            return s;\r\n        }\r\n\r\n        //#endregion - Public methods\r\n\r\n        //#region ICamlElement\r\n\r\n        parent: TParent = null;\r\n        attrs = {} as TAttrs & { [index: string]: number | string | boolean };\r\n        content = {} as TContent & { [index: string]: CElement | CElement[] | string | number | boolean};\r\n\r\n        //#endregion - ICamlElement\r\n    }\r\n}","namespace Fx.SharePoint.Caml.Queries {\r\n\r\n    export abstract class LogicalJoin<\r\n\r\n            TAttrs extends ILogicalJoinAttrs,\r\n            TContent extends ILogicalJoinContent\r\n\r\n        > extends CamlElement<\r\n\r\n            Where | LogicalJoin<ILogicalJoinAttrs, ILogicalJoinContent>,\r\n            TAttrs,\r\n            TContent\r\n\r\n        > {\r\n\r\n        //#region Constructor\r\n\r\n        /**\r\n         * Make config parameter required.\r\n         * @param config\r\n         */\r\n        constructor(config: TConfig<TAttrs, TContent>) {\r\n            super(config);\r\n        }\r\n\r\n        //#endregion - Constructor\r\n    }\r\n}","namespace Fx.SharePoint.Caml.Queries {\r\n\r\n    export class And extends LogicalJoin<IAndAttrs, IAndContent> {\r\n\r\n    }\r\n}","namespace Fx.SharePoint.Caml.Queries {\r\n\r\n    export class Or extends LogicalJoin<IOrAttrs, IOrContent> {\r\n\r\n    }\r\n}","namespace Fx.SharePoint.Caml.Queries {\r\n\r\n    export abstract class ComparisonOperator<\r\n\r\n            TAttrs extends IComparisonOperatorAttrs,\r\n            TContent extends IComparisonOperatorContent\r\n\r\n        > extends CamlElement<\r\n\r\n            Where | LogicalJoin<ILogicalJoinAttrs, ILogicalJoinContent>,\r\n            TAttrs,\r\n            TContent\r\n\r\n        > {\r\n\r\n        /**\r\n         * Make config parameter required.\r\n         * @param config\r\n         */\r\n        constructor(config: { attrs?: TAttrs } & TContent) {\r\n            super(config);\r\n        }\r\n\r\n        //#endregion - Constructor\r\n    }\r\n}","namespace Fx.SharePoint.Caml.Queries {\r\n\r\n    export abstract class UnaryOperator<\r\n\r\n            TAttrs extends IUnaryOperatorAttrs,\r\n            TContent extends IUnaryOperatorContent\r\n\r\n        > extends ComparisonOperator<\r\n\r\n            TAttrs,\r\n            TContent\r\n\r\n        > {\r\n\r\n    }\r\n}","namespace Fx.SharePoint.Caml.Queries {\r\n\r\n    export abstract class BinaryOperator<\r\n\r\n            TAttrs extends IBinaryOperatorAttrs,\r\n            TContent extends IBinaryOperatorContent\r\n\r\n        > extends ComparisonOperator<\r\n\r\n            TAttrs,\r\n            TContent\r\n\r\n        > {\r\n\r\n    }\r\n}","namespace Fx.SharePoint.Caml.Queries {\r\n\r\n    export abstract class SingleValueBinaryOperator<\r\n\r\n            TAttrs extends ISingleValueBinaryOperatorAttrs,\r\n            TContent extends ISingleValueBinaryOperatorContent\r\n\r\n        > extends BinaryOperator<\r\n\r\n            TAttrs,\r\n            TContent\r\n\r\n        > {\r\n        \r\n    }\r\n}","namespace Fx.SharePoint.Caml.Queries {\r\n\r\n    export abstract class MultipleValueBinaryOperator<\r\n\r\n            TAttrs extends IMultipleValueBinaryOperatorAttrs,\r\n            TContent extends IMultipleValueBinaryOperatorContent\r\n\r\n        > extends BinaryOperator<\r\n\r\n            TAttrs,\r\n            TContent\r\n\r\n        > {\r\n        \r\n    }\r\n}","namespace Fx.SharePoint.Client {\r\n\r\n    //#region Constants\r\n\r\n    const DEFAULT_OPTIONS: IListOperationOptions = {\r\n        defer: false\r\n    };\r\n\r\n    //#endregion - Constants\r\n\r\n    /**\r\n     * Init the list field info and guaranty that and list operation\r\n     * will take place after list init successfully.\r\n     *\r\n     * There are some fields get will be retrieved by defaults: Id, Title, ... (ListBase.defaultFields)\r\n     * By default, all user defined field (!SP.Field.fromBaseType) are retrieved.\r\n     */\r\n    export abstract class ListBase implements IList {\r\n\r\n        //#region Fields\r\n\r\n        private config: IListConfig;\r\n\r\n        /**\r\n         * A reference to SP.List object.\r\n         * Used to perform CRUD.\r\n         */\r\n        protected spList: SP.List;\r\n\r\n        /**\r\n         * Only fields contained in this collection are retrieved by get method.\r\n         * These fields are initialized by this.initFields().\r\n         */\r\n        private fields: IListFieldCollection;\r\n\r\n        /**\r\n         * backup\r\n         */\r\n        private spFields: SP.Field[];\r\n\r\n        /**\r\n         * All list operation only performed after this promise resolved.\r\n         */\r\n        protected initPromise: ng.IPromise<void>;\r\n\r\n        /**\r\n         * Logger for logging error.\r\n         */\r\n        private logger: ILogger;\r\n\r\n        //#endregion - Fields\r\n\r\n        //#region Constructor\r\n\r\n        constructor(\r\n            config: IListConfigLiteral,\r\n            private serviceContext: IServiceContext\r\n        ) {\r\n\r\n            this.config = factory().createListConfig(config, this);\r\n\r\n            this.logger = factory().createLogger({\r\n                listName: this.config.listName,\r\n                contextUrl: this.clientContext.get_url()\r\n            });\r\n\r\n            this.initPromise = this.initFields();\r\n        }\r\n\r\n        //#endregion - Constructor\r\n\r\n        //#region Properties\r\n\r\n        protected get clientContext(): SP.ClientContext {\r\n            return this.serviceContext.clientContext;\r\n        }\r\n\r\n        //#endregion - Properties\r\n\r\n        //#region Static Properties\r\n\r\n        private static defaultFieldsLiteral: TIndexdedFieldConfigLiteral = [\r\n            \"Title\",\r\n            \"Author\",\r\n            \"Editor\",\r\n            \"Created\",\r\n            \"Modified\",\r\n            \"UniqueId\"\r\n        ];\r\n\r\n        //#endregion - Static Properties\r\n\r\n        //#region Static Methods\r\n\r\n        static setDefaultFields(fieldConfig: TIndexdedFieldConfigLiteral): void {\r\n            ListBase.defaultFieldsLiteral = fieldConfig;\r\n        }\r\n\r\n        static getDefaultFields(): TIndexdedFieldConfigLiteral {\r\n            return ListBase.defaultFieldsLiteral;\r\n        }\r\n\r\n        //#endregion - Static Methods\r\n\r\n        //#region Abstract Methods\r\n\r\n        protected abstract getByIdAsyncImpl(id: number, options: IListOperationOptions): ng.IPromise<IListItem>;\r\n        protected abstract getManyAsyncImpl(options: IListOperationOptions): ng.IPromise<IListItemCollection>;\r\n        protected abstract deleteItemAsyncImpl(listItem: IListItem): ng.IPromise<void>;\r\n\r\n        //#endregion - Abstract Methods\r\n\r\n        //#region Public Methods\r\n\r\n        /**\r\n         * Get field by field's internal name.\r\n         */\r\n        getFieldByName(fieldInternalName: string) {\r\n            return _.find(this.fields, f => f.internalName === fieldInternalName);\r\n        }\r\n\r\n        //#endregion - Public Methods\r\n\r\n        //#region Private methods\r\n\r\n        /**\r\n         * Get SP.Fields from server.\r\n         */\r\n        private initFields(): ng.IPromise<void> {\r\n\r\n            // TODO: Get spList from this.serviceContext.registerList(listNameOrId)\r\n            // -> get item chi lay 1 so truong nhat dinh -> truyen ngay vao luc khoi tao list??\r\n\r\n            this.spList = this.clientContext.get_web().get_lists().getByTitle(this.config.listName);\r\n            this.clientContext.load(this.spList, \"Fields\");\r\n\r\n            return this.serviceContext.commitChanges(false).then(() => {\r\n                this.spFields = this.spList.get_fields().get_data();\r\n                this.refreshListFields();\r\n            });\r\n        }\r\n\r\n        /**\r\n         * Parse SP.Field to IListField.\r\n         */\r\n        private refreshListFields(): void {\r\n            this.fields = _.map(this.getFieldConfigs(), fieldConfig => {\r\n                const spField = _.find(this.spFields, spField => spField.get_internalName() === fieldConfig.name);\r\n                return factory().createListField(spField, fieldConfig, this);\r\n            });\r\n        }\r\n\r\n        private getFieldConfigs(): IFieldConfig[] {\r\n            const userFieldsParser = factory().createUserFieldsConfigParser(this.spFields, this.config.userFields, this);\r\n            const defaultFieldsParser = factory().createDefaultFieldsConfigParser(this.spFields, this.config.defaultFields, this);\r\n            const mergedfieldsParser = factory().createMergedFieldsConfigParser(\r\n                this.spFields,\r\n                this.config.fields,\r\n                this,\r\n                defaultFieldsParser,\r\n                userFieldsParser\r\n            );\r\n\r\n            if (mergedfieldsParser.hasFieldConfigs) {\r\n                return mergedfieldsParser.getFieldConfigs();\r\n            }\r\n\r\n            return _.concat(\r\n                defaultFieldsParser.getFieldConfigs(),\r\n                userFieldsParser.getFieldConfigs()\r\n            );\r\n        }\r\n\r\n        //#endregion - Private methods\r\n\r\n        //#region IList\r\n\r\n        get_listConfig(): IListConfig {\r\n            return this.config;\r\n        }\r\n\r\n        get_fields(): IListFieldCollection {\r\n            return this.fields;\r\n        }\r\n\r\n        get_serviceContext(): IServiceContext {\r\n            return this.serviceContext;\r\n        }\r\n\r\n        /**\r\n         * Get nomalized default fields.\r\n         */\r\n        get_defaultFieldConfigs(): IFieldConfig[] {\r\n            try {\r\n                return factory().createArrayFieldConfig(\r\n                    ListBase.defaultFieldsLiteral,\r\n                    this.config\r\n                );\r\n            }\r\n            catch (e) {\r\n                if (e instanceof FieldConfigCreationException) {\r\n                    const error = e as FieldConfigCreationException;\r\n                    throw new DefaultFieldConfigException(error.message);\r\n                }\r\n                else {\r\n                    throw e;\r\n                }\r\n            }\r\n        }\r\n\r\n        get_logger(): ILogger {\r\n            return this.logger;\r\n        }\r\n\r\n        /**\r\n         * Get list item by id.\r\n         * @param id\r\n         * @param options\r\n         */\r\n        getByIdAsync(id: number, options = DEFAULT_OPTIONS): ng.IPromise<IListItem> {\r\n            return this.initPromise.then(() => this.getByIdAsyncImpl(id, options));\r\n        }\r\n\r\n        /**\r\n         * Get list item by fileter.\r\n         * @param options\r\n         */\r\n        getManyAsync(options = DEFAULT_OPTIONS): ng.IPromise<IListItemCollection> {\r\n            return this.initPromise.then(() => this.getManyAsyncImpl(options));\r\n        }\r\n\r\n        deleteItemAsync(listItem: IListItem): angular.IPromise<void> {\r\n            return this.initPromise.then(() => this.deleteItemAsyncImpl(listItem));\r\n        }\r\n\r\n        //#endregion - IList\r\n        \r\n    }\r\n}","namespace Fx.SharePoint.Client {\r\n\r\n    //#region Import\r\n\r\n    var View: typeof Caml.Lists.View;\r\n    var Query: typeof Caml.Lists.Query;\r\n    var Where: typeof Caml.Queries.Where;\r\n    var Eq: typeof Caml.Queries.Eq;\r\n    var Value: typeof Caml.Queries.Value;\r\n    var RowLimit: typeof Caml.Lists.RowLimit;\r\n    var ViewFields: typeof Caml.Lists.ViewFields;\r\n    var FieldRefQ: typeof Caml.Queries.FieldRef;\r\n    var FieldRefL: typeof Caml.Lists.FieldRef;\r\n\r\n    var q: typeof Caml.Queries;\r\n    var l: typeof Caml.Lists;\r\n\r\n    initClass(() => {\r\n\r\n        View = Caml.Lists.View;\r\n        Query = Caml.Lists.Query;\r\n        Where = Caml.Queries.Where;\r\n        Eq = Caml.Queries.Eq;\r\n        Value = Caml.Queries.Value;\r\n        RowLimit = Caml.Lists.RowLimit;\r\n        ViewFields = Caml.Lists.ViewFields;\r\n        FieldRefQ = Caml.Queries.FieldRef;\r\n        FieldRefL = Caml.Lists.FieldRef;\r\n\r\n        q = Caml.Queries;\r\n        l = Caml.Lists;\r\n    });\r\n\r\n    //#endregion - Import\r\n\r\n    export class List extends ListBase {\r\n\r\n        //#region ListBase\r\n\r\n        protected getByIdAsyncImpl(id: number, options: IListOperationOptions): ng.IPromise<IListItem> {\r\n            const items = this.spList.getItems(this.getQuery(id));\r\n            this.clientContext.load(items);\r\n\r\n            return this.get_serviceContext().commitChanges(false)\r\n                .then(() => {\r\n                    var item = _.first(items.get_data());\r\n                    return item != null ? factory().createListItem(item, this) : null;\r\n                });\r\n        }\r\n\r\n        protected getManyAsyncImpl(options: IListOperationOptions): ng.IPromise<IListItemCollection> {\r\n            throw new Error(\"Not implemented\");\r\n        }\r\n\r\n        protected deleteItemAsyncImpl(listItem: IListItem): ng.IPromise<void> {\r\n            listItem.get_spItem().deleteObject();\r\n            return this.get_serviceContext().commitChanges(false);\r\n        }\r\n\r\n        //#endregion - ListBase\r\n\r\n        //#region Private Methods\r\n\r\n        private getQuery(id?: number): SP.CamlQuery {\r\n            const view = new View();\r\n\r\n            if (id > 0) {\r\n                view.content.query =\r\n                    new Query({\r\n                        where: new Where({\r\n                            condition: new Eq({\r\n                                fieldRef: new q.FieldRef({ attrs: { name: \"ID\" } }),\r\n                                value: new Value({\r\n                                    attrs: { type: \"Integer\" },\r\n                                    value: id\r\n                                })\r\n                            })\r\n                        })\r\n                    });\r\n            }\r\n\r\n            // Fields for viewfields.\r\n            const fields = _.map(this.get_fields(), field =>\r\n                new l.FieldRef({ attrs: { name: field.internalName } })\r\n            );\r\n\r\n            view.content.viewFields = new ViewFields({ fields: fields });\r\n\r\n            const query = factory().createSPCamlQuery();\r\n            query.set_viewXml(view.toString());\r\n\r\n            return query;\r\n        }\r\n\r\n        //#endregion - Private Methods\r\n    }\r\n}","namespace Fx.SharePoint.Client {\r\n\r\n    //#region Types\r\n\r\n    type ParseFn = {};\r\n\r\n    //#endregion - Types\r\n\r\n    export class ListField implements IListField {\r\n\r\n        //#region Fields\r\n\r\n        private logger: ILogger;\r\n\r\n        //#endregion - Fields\r\n\r\n        //#region Constructor\r\n\r\n        constructor(\r\n            protected spField: SP.Field,\r\n            private fieldConfig: IFieldConfig,\r\n            private list: IList\r\n        ) {\r\n            this.logger = factory()\r\n                .createLogger({\r\n                    fieldName: this.internalName,\r\n                    listName: this.listName,\r\n                    contextUrl: this.contextUrl\r\n                });\r\n        }\r\n\r\n        //#endregion - Constructor\r\n\r\n        //#region Properties\r\n\r\n        protected get listName(): string {\r\n            return this.get_list().get_listConfig().listName;\r\n        }\r\n\r\n        protected get contextUrl(): string {\r\n            return this.get_list().get_serviceContext().clientContext.get_url();\r\n        }\r\n\r\n        //#endregion - Properties\r\n\r\n        //#region Virtual Methods\r\n\r\n        /**\r\n         * Get value for this field from SP.ListItem.\r\n         * Promise to enable getting value for lookup field (maybe).\r\n         */\r\n        protected getValueOverride(item: IListItem): ng.IPromise<any> {\r\n            const value = item.get_spItem().get_item(this.internalName);\r\n            return $q().resolve(value);\r\n        }\r\n\r\n        /**\r\n         * Set value to SP.ListItem.\r\n         * Promise enabled to pair with getValueImpl().\r\n         */\r\n        protected setValueOverride(item: IListItem, value: any): ng.IPromise<void> {\r\n            return this.setValueInternal(item, value);\r\n        }\r\n\r\n        //#endregion - Virtual Methods\r\n\r\n        //#region Protected Methods\r\n\r\n        /**\r\n         * Set current class `field` field value.\r\n         * @param type\r\n         */\r\n        protected setField(type: any): any {\r\n            const clientContext = this.get_list().get_serviceContext().clientContext;\r\n            this.spField = clientContext.castTo(this.spField, type) as SP.Field;\r\n        }\r\n\r\n        /**\r\n         * Helper for sub classes that can not call ListField.setValueOverride().\r\n         */\r\n        protected setValueInternal(item: IListItem, value: any): ng.IPromise<void> {\r\n            const originalValue = item.getOriginalData(this);\r\n\r\n            if (this.isFieldValueChanged(value, originalValue)) {\r\n                item.get_spItem().set_item(this.internalName, value);\r\n            }\r\n\r\n            return $q().resolve();\r\n        }\r\n\r\n        protected isFieldValueChanged(newValue: any, originalValue: any) {\r\n            return !_.isEqual(newValue, originalValue);\r\n        }\r\n\r\n        /**\r\n         * Support logging item id if possible.\r\n         */\r\n        protected getLogger(listItem: IListItem = null): ILogger {\r\n            if (listItem == null) return this.logger;\r\n\r\n            const logger = this.logger.clone();\r\n            logger.itemId = listItem.id;\r\n\r\n            return logger;\r\n        }\r\n\r\n        //#endregion - Protected Methods\r\n\r\n        //#region IListField\r\n\r\n        get_list(): IList {\r\n            return this.list;\r\n        }\r\n\r\n        get_fieldConfig(): IFieldConfig {\r\n            return this.fieldConfig;\r\n        }\r\n\r\n        /**\r\n         * SPListItem data -> field parsers -> this.$$private.fielData.\r\n         */\r\n        parseResponse(item: IListItem): ng.IPromise<void> {\r\n\r\n            return this.getValueOverride(item)\r\n                .then(value => {\r\n                    item.setOriginalData(this, value);\r\n\r\n                    return _.reduce(\r\n                        this.get_fieldConfig().parsers.response,\r\n                        (memo, parser) => {\r\n                            return memo.then(prevValue => {\r\n                                return $q()\r\n                                    .resolve(parser(prevValue, item))\r\n                                    .then(newValue => {\r\n                                        if (newValue !== undefined) item.setOriginalData(this, newValue);\r\n                                        return item.getOriginalData(this);\r\n                                    });\r\n                            });\r\n                        },\r\n                        $q().resolve(value)\r\n                    );\r\n                });\r\n        }\r\n\r\n        /**\r\n         * this.$$private.fieldData -> field parsers -> SPListItem data.\r\n         */\r\n        parseRequest(item: IListItem): ng.IPromise<void> {\r\n            const value = item.getData(this);\r\n\r\n            return _\r\n                // this.$$private.FieldData -> field parsers.\r\n                .reduce(\r\n                this.get_fieldConfig().parsers.request,\r\n                (memo, parser) => {\r\n                    return memo.then(prevValue => {\r\n                        return $q()\r\n                            .resolve(parser(prevValue, item))\r\n                            .then(newValue => {\r\n                                return newValue !== undefined\r\n                                    ? newValue\r\n                                    : prevValue;\r\n                            });\r\n                    });\r\n                },\r\n                $q().resolve(value)\r\n                )\r\n\r\n                // field parsers result -> SPListItem data.\r\n                .then(finalValue => this.setValueOverride(item, finalValue));\r\n        }\r\n\r\n        get id(): string {\r\n            return this.spField.get_id().toString();\r\n        };\r\n\r\n        get internalName(): string {\r\n            return this.spField.get_internalName();\r\n        };\r\n\r\n        get readOnlyField(): boolean {\r\n            return this.spField.get_readOnlyField();\r\n        };\r\n\r\n        get required(): boolean {\r\n            return this.spField.get_required();\r\n        }\r\n\r\n        get fromBaseType(): boolean {\r\n            return this.spField.get_fromBaseType();\r\n        }\r\n\r\n        get schemaXml(): string {\r\n            return this.spField.get_schemaXml();\r\n        };\r\n\r\n        //#endregion - IListField\r\n    }\r\n}","namespace Fx.SharePoint.Client {\r\n\r\n    export class ListFieldMultiChoice extends ListField implements IListFieldMultiChoice {\r\n\r\n        //#region Fields\r\n\r\n        protected spField: SP.FieldMultiChoice;\r\n\r\n        //#endregion - Fields\r\n\r\n        //#region Constructor\r\n\r\n        constructor(\r\n            field: SP.Field,\r\n            fieldConfig: IFieldConfig,\r\n            list: IList\r\n        ) {\r\n            super(field, fieldConfig, list);\r\n            this.setField(SP.FieldMultiChoice);\r\n        }\r\n\r\n        //#endregion - Constructor\r\n\r\n\r\n        //#region Properties\r\n\r\n        get choices(): string[] {\r\n            return this.spField.get_choices();\r\n        }\r\n\r\n        /**\r\n         * Gets or sets a value that specifies whether the field can accept\r\n         * values other than those specified by the Choices property.\r\n         */\r\n        get fillInChoice(): boolean {\r\n            return this.spField.get_fillInChoice();\r\n        }\r\n\r\n        //#endregion - Properties\r\n\r\n        //#region Overrides\r\n\r\n        protected setValueOverride(item: IListItem, value: any): ng.IPromise<void> {\r\n            if (_.isArray(value)) {\r\n                // convert all items to string (if posible).\r\n                value = _.map(value, v => v != null ? v.toString() : v);\r\n            }\r\n\r\n            if (!this.fillInChoice && value != null) {\r\n                if (!_.isArray(value)) {\r\n                    this.printError(item, value);\r\n                }\r\n\r\n                _.forEach(value, v => {\r\n                    if (!_.includes(this.choices, v)) {\r\n                        this.printError(item, value);\r\n                    }\r\n                });\r\n            }\r\n\r\n            return super.setValueOverride(item, value);\r\n        }\r\n\r\n        //#endregion - Overrides\r\n\r\n        //#region Private Methods\r\n\r\n        private printError(item: IListItem, value: any): void {\r\n            this.getLogger(item).error(\r\n                `Expect an array of values in the list:\\n\\n` +\r\n                _.map(this.choices, c => \"-\\t\" + c).join(\"\\n\") +\r\n                \"\\n\\n\" +\r\n                `But got '${value}'.`\r\n            );\r\n        }\r\n\r\n        //#endregion - Private Methods\r\n    }\r\n}","namespace Fx.SharePoint.Client {\r\n\r\n    export class ListFieldChoice extends ListFieldMultiChoice implements IListFieldChoice {\r\n\r\n        //#region Fields\r\n\r\n        protected spField: SP.FieldChoice;\r\n\r\n        //#endregion - Fields\r\n\r\n        //#region Constructor\r\n\r\n        constructor(\r\n            spField: SP.Field,\r\n            fieldConfig: IFieldConfig,\r\n            list: IList\r\n        ) {\r\n            super(spField, fieldConfig, list);\r\n            this.setField(SP.FieldChoice);\r\n        }\r\n\r\n        //#endregion - Constructor\r\n\r\n        //#region Overrides\r\n\r\n        protected setValueOverride(item: IListItem, value: any): ng.IPromise<void> {\r\n            if (!this.fillInChoice && value != null && !_.includes(this.choices, value)) {\r\n\r\n                this.getLogger(item).error(\r\n                    `Expect a single value in the list:\\n\\n` +\r\n                    _.map(this.choices, c => \"-\\t\" + c).join(\"\\n\") +\r\n                    \"\\n\\n\" +\r\n                    `But got '${value}'.`\r\n                );\r\n            }\r\n            \r\n            return super.setValueInternal(item, value);\r\n        }\r\n\r\n        //#endregion - Overrides\r\n    }\r\n}","namespace Fx.SharePoint.Client {\r\n\r\n    export class Exception extends Error {\r\n\r\n        constructor(public message?: string) {\r\n            super(message);\r\n        }\r\n    }\r\n}","namespace Fx.SharePoint.Client {\r\n\r\n    export class FieldConfigCreationException extends Exception {\r\n\r\n        //#region Constructor\r\n\r\n        constructor(message?: string, public fieldName?: string) {\r\n            super(message);\r\n        }\r\n\r\n        //#endregion - Constructor\r\n    }\r\n}","namespace Fx.SharePoint.Client {\r\n\r\n    export class DefaultFieldConfigException extends Exception {\r\n        \r\n    }\r\n}","namespace Fx.SharePoint.Client {\r\n\r\n    export abstract class FieldsConfigParser<T extends void | boolean | TFieldConfig> implements IFieldsConfigParser {\r\n\r\n        //#region Constructor\r\n\r\n        constructor(\r\n            protected spFields: SP.Field[],\r\n            protected fieldConfigs: T,\r\n            protected list: IList\r\n        ) {\r\n            this.validate();\r\n        }\r\n\r\n        //#endregion - Constructor\r\n\r\n        //#region Properties\r\n\r\n        get mode(): FieldConfigMode {\r\n            return this.getMode();\r\n        }\r\n\r\n        protected get logger(): ILogger {\r\n            return this.list.get_logger();\r\n        }\r\n\r\n        //#endregion - Properties\r\n\r\n        //#region Abstract Methods\r\n\r\n        protected abstract getMode(): FieldConfigMode;\r\n\r\n        /**\r\n         * Base configs for overwrite logic.\r\n         */\r\n        protected abstract getBaseFieldConfigsForOverwrite(): IFieldConfig[];\r\n\r\n        protected abstract getDefaultFieldsImpl(): IFieldConfig[];\r\n        protected abstract getOverwriteFieldsImpl(): IFieldConfig[];\r\n\r\n        //#endregion - Abstract Methods\r\n\r\n        //#region Context props\r\n\r\n        protected get factory(): IAppFactory {\r\n            return AppContext.current.factory;\r\n        }\r\n\r\n        //#endregion - Context props\r\n\r\n        //#region Public Methods\r\n\r\n        getDefaultFields(): IFieldConfig[] {\r\n            if (this.mode !== FieldConfigMode.Default) {\r\n                throw new Error(\"This field config is not in default mode.\");\r\n            }\r\n\r\n            return this.getDefaultFieldsImpl();\r\n        }\r\n\r\n        getOverwriteFields(): IFieldConfig[] {\r\n            if (this.mode !== FieldConfigMode.Overwrite)\r\n                throw new Error(\"This field config is not in overwrite mode.\");\r\n\r\n            return this.getOverwriteFieldsImpl();\r\n        }\r\n\r\n        getModifyFields(): IFieldConfig[] {\r\n            if (this.mode !== FieldConfigMode.Modify)\r\n                throw new Error(\"This field config is not in modify mode.\");\r\n\r\n            return this.getModifyFieldsImpl();\r\n        }\r\n\r\n        //#endregion - Public Methods\r\n\r\n        //#region Protected Methods\r\n\r\n        protected validate(): void {\r\n            const configs = FieldUtils.getFieldConfigs(this.fieldConfigs);\r\n            _.forEach(configs, config => {\r\n\r\n                if (!_.some(this.spFields, spField => spField.get_internalName() === config.name)) {\r\n                    this.logger.error(\r\n                        `Unexpected field config for nonexisted field '${config.name}'.`\r\n                    );\r\n                }\r\n\r\n                if (_.filter(configs, c => c.name === config.name).length > 1) {\r\n                    this.logger.error(\r\n                        `Duplicate field config for field '${config.name}'.`\r\n                    );\r\n                }\r\n            });\r\n        }\r\n\r\n        //#endregion - Protected Methods\r\n\r\n        //#region Private Methods\r\n\r\n        private getModifyFieldsImpl(): IFieldConfig[] {\r\n            const baseConfigs = this.getBaseFieldConfigsForOverwrite();\r\n\r\n            // Modify baseConfigs based on values in this.fieldConfigs.\r\n            _.forEach(this.fieldConfigs as any as TFieldHashConfig, (config, key) => {\r\n\r\n                if (!config.active && _.some(baseConfigs, c => c.name === key)) {\r\n                    _.pullAllWith(\r\n                        baseConfigs,\r\n                        [{ name: key }],\r\n                        (baseValue, otherValue) => baseValue.name === otherValue.name\r\n                    );\r\n                }\r\n                else if (config.active) {\r\n\r\n                    // Remove existed config\r\n                    const existedConfig = _.find(baseConfigs, c => c.name === key);\r\n                    if (existedConfig) {\r\n                        _.pull(baseConfigs, existedConfig);\r\n                    }\r\n\r\n                    baseConfigs.push(this.factory.createFieldConfig(\r\n                        config,\r\n                        this.list.get_listConfig()\r\n                    ));\r\n                }\r\n            });\r\n\r\n            return baseConfigs;\r\n        }\r\n\r\n        //#endregion - Private Methods\r\n\r\n        //#region IFieldsConfigParser\r\n\r\n        getFieldConfigs(): IFieldConfig[] {\r\n            switch (this.mode) {\r\n                case FieldConfigMode.Default:\r\n                    return this.getDefaultFields();\r\n                case FieldConfigMode.Overwrite:\r\n                    return this.getOverwriteFields();\r\n                case FieldConfigMode.Modify:\r\n                    return this.getModifyFields();\r\n            }\r\n        }\r\n\r\n        //#endregion - IFieldsConfigParser\r\n    }\r\n}","namespace Fx.SharePoint.Client {\r\n\r\n    export class MergedFieldsConfigParser extends FieldsConfigParser<void | TFieldConfig> implements IMergedFieldsConfigParser {\r\n\r\n        //#region Constructor\r\n\r\n        constructor(\r\n            spFields: SP.Field[],\r\n            fieldConfigs: void | TFieldConfig,\r\n            list: IList,\r\n            private defaultFieldsConfigParser: IDefaultFieldsConfigParser,\r\n            private userFieldsConfigParser: IUserFieldsConfigParser\r\n        ) {\r\n            super(spFields, fieldConfigs, list);\r\n        }\r\n\r\n        //#endregion - Constructor\r\n\r\n        //#region FieldsConfigParser\r\n\r\n        protected getMode(): FieldConfigMode {\r\n            if (this.fieldConfigs == null) return FieldConfigMode.Default;\r\n            else if (_.isArray(this.fieldConfigs)) return FieldConfigMode.Overwrite;\r\n            else return FieldConfigMode.Modify;\r\n        }\r\n\r\n        protected getBaseFieldConfigsForOverwrite(): IFieldConfig[] {\r\n            return _.concat(\r\n                this.defaultFieldsConfigParser.getFieldConfigs(),\r\n                this.userFieldsConfigParser.getFieldConfigs()\r\n            );\r\n        }\r\n\r\n        protected getDefaultFieldsImpl(): IFieldConfig[] {\r\n            throw new Error(\"This field config has no default value.\");\r\n        }\r\n\r\n        protected getOverwriteFieldsImpl(): IFieldConfig[] {\r\n            return this.fieldConfigs as IFieldConfig[];\r\n        }\r\n\r\n        //#endregion - FieldsConfigParser\r\n\r\n        //#region IMergedFieldsConfigParser\r\n\r\n        get hasFieldConfigs(): boolean {\r\n            return this.mode !== FieldConfigMode.Default;\r\n        }\r\n\r\n        //#endregion - IMergedFieldsConfigParser\r\n    }\r\n}","namespace Fx.SharePoint.Client {\r\n\r\n    export class DefaultFieldsConfigParser extends FieldsConfigParser<boolean | TFieldConfig> implements IDefaultFieldsConfigParser {\r\n\r\n        //#region FieldsConfigParser\r\n\r\n        protected getMode(): FieldConfigMode {\r\n            if (this.fieldConfigs === true) return FieldConfigMode.Default;\r\n            else if (this.fieldConfigs === false || _.isArray(this.fieldConfigs)) return FieldConfigMode.Overwrite;\r\n            else return FieldConfigMode.Modify;\r\n        }\r\n\r\n        protected getBaseFieldConfigsForOverwrite(): IFieldConfig[] {\r\n            return this.getDefaultFieldsImpl();\r\n        }\r\n\r\n        protected getDefaultFieldsImpl(): IFieldConfig[] {\r\n            return this.list.get_defaultFieldConfigs();\r\n        }\r\n\r\n        protected getOverwriteFieldsImpl(): IFieldConfig[] {\r\n            return (this.fieldConfigs === false)\r\n                ? [] // empty :|\r\n                : this.fieldConfigs as IFieldConfig[];\r\n        }\r\n        \r\n        protected validate(): void {\r\n            super.validate();\r\n\r\n            const configs = FieldUtils.getFieldConfigs(this.fieldConfigs);\r\n            const defaultFields = _.filter(this.spFields, spField => spField.get_fromBaseType());\r\n\r\n            _.forEach(configs, config => {\r\n                if (!_.some(defaultFields, field => field.get_internalName() === config.name)) {\r\n                    this.logger.warn(\r\n                        `Field '${config.name}' is not a default field but configured as a default field.\\n\\n` +\r\n                        `!!!IMPORTANT: Configuration for this field will be ignored.`\r\n                    );\r\n\r\n                    FieldUtils.removeFieldConfig(\r\n                        this.fieldConfigs as TFieldConfig,\r\n                        config\r\n                    );\r\n                }\r\n            });\r\n        }\r\n\r\n        //#endregion - FieldsConfigParser\r\n    }\r\n}","namespace Fx.SharePoint.Client {\r\n\r\n    export class UserFieldsConfigParser extends FieldsConfigParser<boolean | TFieldConfig> implements IUserFieldsConfigParser {\r\n\r\n        //#region FieldsConfigParser\r\n\r\n        protected getMode(): FieldConfigMode {\r\n            if (this.fieldConfigs === true) return FieldConfigMode.Default;\r\n            else if (this.fieldConfigs === false || _.isArray(this.fieldConfigs)) return FieldConfigMode.Overwrite;\r\n            else return FieldConfigMode.Modify;\r\n        }\r\n\r\n        protected getBaseFieldConfigsForOverwrite(): IFieldConfig[] {\r\n            return this.getDefaultFieldsImpl();\r\n        }\r\n\r\n        protected getDefaultFieldsImpl(): IFieldConfig[] {\r\n            const userFields = _.filter(this.spFields, spField => !spField.get_fromBaseType());\r\n            return _.map(userFields, spField => {\r\n                return this.factory.createFieldConfig(\r\n                    { name: spField.get_internalName() },\r\n                    this.list.get_listConfig()\r\n                );\r\n            });\r\n        }\r\n\r\n        protected getOverwriteFieldsImpl(): IFieldConfig[] {\r\n            return (this.fieldConfigs === false)\r\n                ? [] // empty :|\r\n                : this.fieldConfigs as IFieldConfig[];\r\n        }\r\n\r\n        protected validate(): void {\r\n            super.validate();\r\n\r\n            const configs = FieldUtils.getFieldConfigs(this.fieldConfigs);\r\n            const userFields = _.filter(this.spFields, spField => !spField.get_fromBaseType());\r\n\r\n            _.forEach(configs, config => {\r\n                if (!_.some(userFields, field => field.get_internalName() === config.name)) {\r\n                    this.logger.warn(\r\n                        `Field '${config.name}' is not a user field but configured as a user field.\\n\\n` +\r\n                        `!!!IMPORTANT: Configuration for this field will be ignored.`\r\n                    );\r\n\r\n                    FieldUtils.removeFieldConfig(\r\n                        this.fieldConfigs as TFieldConfig,\r\n                        config\r\n                    );\r\n                }\r\n            });\r\n        }\r\n\r\n        //#endregion - FieldsConfigParser\r\n    }\r\n}","namespace Fx.SharePoint.Client {\r\n\r\n    export class Queue<T> implements IQueue<T> {\r\n\r\n        //#region Fields\r\n\r\n        /**\r\n         * Oldest item -> index === 0.\r\n         */\r\n        protected data: T[] = [];\r\n\r\n        //#endregion - Fields\r\n\r\n        //#region IQueue\r\n\r\n        enqueue(item: T): void {\r\n            this.data.push(item);\r\n        }\r\n\r\n        dequeue(): T {\r\n            if (_.isEmpty(this.data))\r\n                throw new Error(\"Queue is empty, can not dequeue.\");\r\n\r\n            return this.data.shift();\r\n        }\r\n\r\n        /**\r\n         * Oldest item -> index === 0.\r\n         */\r\n        dequeueAll(): T[] {\r\n            const results: T[] = [];\r\n\r\n            while (!_.isEmpty(this.data)) {\r\n                results.push(this.dequeue());\r\n            }\r\n\r\n            return results;\r\n        }\r\n\r\n        //#endregion - IQueue\r\n    }\r\n}","namespace Fx.SharePoint.Client {\r\n\r\n    export class PendingQueue extends Queue<ICommitOperation<any>> implements IPendingQueue {\r\n\r\n        //#region Overrides\r\n\r\n        enqueue(operation: ICommitOperation<any>): void {\r\n            const existed = _.some(\r\n                this.data,\r\n                op => op.item === operation.item\r\n            );\r\n\r\n            if (!existed) {\r\n                super.enqueue(operation);\r\n            }\r\n        }\r\n\r\n        //#endregion - Overrides\r\n    }\r\n}","namespace Fx.SharePoint.Client {\r\n\r\n    export abstract class CommitOperation<TItem> implements ICommitOperation<TItem> {\r\n\r\n        //#region Constructor\r\n\r\n        constructor(public item: TItem) {\r\n            \r\n        }\r\n\r\n        //#endregion - Constructor\r\n\r\n        //#region IPendingOperation\r\n\r\n        preCommitInvoke(): ng.IPromise<void> {\r\n            return $q().resolve();\r\n        }\r\n\r\n        postCommitInvoke(): angular.IPromise<void> {\r\n            return $q().resolve();\r\n        }\r\n\r\n        //#endregion - IPendingOperation\r\n    }\r\n}","namespace Fx.SharePoint.Client {\r\n\r\n    export class ListItemUpdateCommitOperation extends CommitOperation<IListItem> {\r\n    \r\n        //#region PendingOperation\r\n\r\n        preCommitInvoke(): ng.IPromise<void> {\r\n            return this.item.$update()\r\n                .then(() => this.item.get_spItem().update());\r\n        }\r\n\r\n        postCommitInvoke(): ng.IPromise<void> {\r\n            return this.item.$init();\r\n        }\r\n\r\n        //#endregion - PendingOperation\r\n    }\r\n}","namespace Fx.SharePoint.Client {\r\n\r\n    export class SessionContext implements ISessionContext {\r\n\r\n        //#region Constructor\r\n\r\n        constructor(private serviceContext: IServiceContext) {\r\n            \r\n        }\r\n\r\n        //#endregion - Constructor\r\n\r\n        //#region ISessionContext\r\n\r\n        get_serviceContext(): IServiceContext {\r\n            return this.serviceContext;\r\n        }\r\n\r\n        finalize(): void {\r\n            this.get_serviceContext().finalizeSession(this);\r\n        }\r\n\r\n        //#endregion - ISessionContext\r\n    }\r\n}","namespace Fx.SharePoint.Client {\r\n\r\n    /**\r\n     * Represent an object that only exists while getting data for\r\n     * specified list item.\r\n     */\r\n    export class GetListItemSessionContext extends SessionContext implements IGetListItemSessionContext {\r\n\r\n        //#region Constructor\r\n\r\n        constructor(\r\n            serviceContext: IServiceContext,\r\n            private listItem: IListItem\r\n        ) {\r\n            super(serviceContext);\r\n        }\r\n\r\n        //#endregion - Constructor\r\n\r\n        //#region Getters / Setters\r\n\r\n        get_listItem(): IListItem {\r\n            return this.listItem;\r\n        }\r\n\r\n        //#endregion - Getters / Setters\r\n\r\n        //#region IGetListItemSessionContext\r\n\r\n        getLookupItem(itemId: number, listId: string, fields: string[]): ng.IPromise<IListItem> {\r\n            return $q().resolve({});\r\n        }\r\n        \r\n        /**\r\n         * Get all data for pending request from server.\r\n         */\r\n        retrieveData(): angular.IPromise<void> {\r\n            return $q().resolve();\r\n        }\r\n\r\n        //#endregion - IGetListItemSessionContext\r\n    }\r\n}","","namespace Fx.SharePoint.Caml {\r\n\r\n    export interface ICamlElement {\r\n\r\n        parent: ICamlElement;\r\n        attrs: IElementAttrs;\r\n        content: IElementContent;\r\n\r\n        /**\r\n         * Convert this element to XML string.\r\n         */\r\n        toString(): string;\r\n    }\r\n}","namespace Fx.SharePoint.Caml {\r\n\r\n    export interface IElementAttrs {\r\n    }\r\n}","namespace Fx.SharePoint.Caml {\r\n\r\n    export interface IElementContent {\r\n        //[index: string]: ICamlElement | ICamlElement[];\r\n    }\r\n}","namespace Fx.SharePoint.Client {\r\n\r\n    export interface IServiceContext {\r\n\r\n        clientContext: SP.ClientContext;\r\n        \r\n        /**\r\n         * Get a list object from service context.\r\n         * @param config\r\n         *  - string: listName\r\n         */\r\n        getList(config: string | IListConfigLiteral): IList;\r\n\r\n        /**\r\n         * Commit any changes since last change.\r\n         * @param invokeQueue\r\n         *      Default: true\r\n         *      Invoke all pending request in queue\r\n         */\r\n        commitChanges(invokeQueue?: boolean): ng.IPromise<void>;\r\n\r\n        /**\r\n         * Add list item to pending queue.\r\n         */\r\n        addPending(listItem: IListItem): void;\r\n\r\n        /**\r\n         * Remove this session from session list (default behavior).\r\n         */\r\n        finalizeSession(session: ISessionContext): void;\r\n\r\n        /**\r\n         * Get an GetListItemSessionContext for specified list item.\r\n         * Create a new one if not existed.\r\n         */\r\n        getGetListItemSessionContext(listItem: IListItem): IGetListItemSessionContext;\r\n    }\r\n}","namespace Fx.SharePoint.Client {\r\n\r\n    export class ServiceContext implements IServiceContext {\r\n\r\n        //#region Fields\r\n\r\n        private pendingQueue: IPendingQueue;\r\n        private sessionContextManager: ISessionContextManager;\r\n\r\n        //#endregion - Fields\r\n\r\n        //#region Constructor\r\n\r\n        constructor(serverRelativeUrl?: string) {\r\n            this.clientContext = factory().createSPClientContext(serverRelativeUrl);\r\n\r\n            this.pendingQueue = factory().createPendingQueue();\r\n            this.sessionContextManager = factory().createSessionContextManager(this);\r\n        }\r\n\r\n        //#endregion - Constructor\r\n\r\n        //#region Properties\r\n\r\n        clientContext: SP.ClientContext;\r\n\r\n        //#endregion - Properties\r\n\r\n        //#region Private Methods\r\n\r\n        /**\r\n         * Call ClientContext.executeQueryAsync().\r\n         */\r\n        private commitChangesInternal(): ng.IPromise<void> {\r\n            const defer = $q().defer<void>();\r\n\r\n            this.clientContext.executeQueryAsync(\r\n                () => {\r\n                    defer.resolve();\r\n                },\r\n                (_, args) => {\r\n                    defer.reject(args.get_message());\r\n                }\r\n            );\r\n\r\n            return defer.promise;\r\n        }\r\n\r\n        //#endregion - Private Methods\r\n        \r\n        //#region IServiceContext\r\n\r\n        getList(config: string | IListConfigLiteral): IList {\r\n            const listConfig = typeof config === \"string\"\r\n                ? { listName: config } as IListConfigLiteral\r\n                : config;\r\n\r\n            return factory().createList(listConfig, this);\r\n        }\r\n\r\n        commitChanges(invokeQueue = true): ng.IPromise<void> {\r\n            let operations: ICommitOperation<any>[];\r\n\r\n            return $q()\r\n                .resolve()\r\n                .then(() => {\r\n\r\n                    if (invokeQueue) {\r\n                        operations = this.pendingQueue.dequeueAll();\r\n                        const promises = _.map(operations, op => op.preCommitInvoke());\r\n\r\n                        return $q().all(promises);\r\n                    }\r\n                })\r\n                .then(() => this.commitChangesInternal())\r\n                .then(() => {\r\n\r\n                    if (invokeQueue) {\r\n                        const promises = _.map(operations, op => op.postCommitInvoke());\r\n                        return $q().all(promises);\r\n                    }\r\n                })\r\n                // Satisfy compiler.\r\n                .then(() => {});\r\n        }\r\n\r\n        addPending(listItem: IListItem): void {\r\n            this.pendingQueue.enqueue(factory().createPendingOperation(listItem));\r\n        }\r\n\r\n        finalizeSession(session: ISessionContext): void {\r\n            this.sessionContextManager.finalize(session);\r\n        }\r\n\r\n        getGetListItemSessionContext(listItem: IListItem): IGetListItemSessionContext {\r\n            return this.sessionContextManager.getGetListItemSession(listItem);\r\n        }\r\n\r\n        //#endregion - IServiceContext\r\n    }\r\n}","","namespace Fx.SharePoint.Client {\r\n\r\n    export interface IAppFactory {\r\n    \r\n        /**\r\n         * Create a new service context object from server relative url.\r\n         * Service context support batch request.\r\n         */\r\n        createServiceContext(serverRelativeUrl?: string): IServiceContext;\r\n        \r\n        createList(config: IListConfigLiteral, serviceContext: IServiceContext): IList;\r\n\r\n        createListItem(item: SP.ListItem, list: IList): ng.IPromise<IListItem>;\r\n\r\n        createListConfig(config: IListConfigLiteral, list: IList): IListConfig;\r\n\r\n        createLogger(creationContext: ILoggerCreationContext): ILogger;\r\n\r\n        createListItemPrivateData(spItem: SP.ListItem, list: IList): IListItemPrivateData;\r\n\r\n        createPendingQueue(): IPendingQueue;\r\n\r\n        createPendingOperation(listItem: IListItem): ICommitOperation<IListItem>;\r\n\r\n        createSessionContextManager(serviceContext: IServiceContext): ISessionContextManager;\r\n\r\n        createGetListItemSessionContext(serviceContext: IServiceContext, listItem: IListItem): IGetListItemSessionContext;\r\n\r\n        //#region List fields\r\n\r\n        createListField(spField: SP.Field, fieldConfig: IFieldConfig, list: IList): IListField;\r\n\r\n        createListFieldLookupValue(lookupValue: SP.FieldLookupValue, lookupField: IListFieldLookup, listItem: IListItem): IListFieldLookupValue;\r\n\r\n        createListFieldLookupValuePrivateData(lookupValue: SP.FieldLookupValue, lookupField: IListFieldLookup, listItem: IListItem): IListFieldLookupValuePrivateData;\r\n\r\n        createListFieldUserValue(userValue: SP.FieldUserValue, userField: IListFieldUser, listItem: IListItem): IListFieldUserValue;\r\n\r\n        createListFieldUserValuePrivateData(userValue: SP.FieldUserValue, userField: IListFieldUser, listItem: IListItem): IListFieldUserValuePrivateData;\r\n\r\n        createListFieldUrlValue(urlValue: SP.FieldUrlValue, urlField: IListFieldUrl, listItem: IListItem): IListFieldUrlValue;\r\n\r\n        createListFieldUrlValuePrivateData(urlValue: SP.FieldUrlValue, urlField: IListFieldUrl, listItem: IListItem): IListFieldUrlValuePrivateData;\r\n\r\n        //#endregion - List fields\r\n\r\n        //#region Field configs\r\n\r\n        createFieldConfig(config: INamedFieldConfigLiteral, listConfig: IListConfig): IFieldConfig;\r\n\r\n        /**\r\n         * Create a single field config from literal object.\r\n         */\r\n        createSingleFieldConfig(configLiteral: any, listConfig: IListConfig): IFieldConfig;\r\n\r\n        /**\r\n         * Create a array of field configs from literal object.\r\n         */\r\n        createArrayFieldConfig(configLiteral: any, listConfig: IListConfig): IFieldConfig[];\r\n\r\n        /**\r\n         * Create a hash object of field config from literal object.\r\n         */\r\n        createHashFieldConfig(configLiteral: any, listConfig: IListConfig): TFieldHashConfig;\r\n\r\n        //#endregion - Field configs\r\n\r\n        //#region Field parsing\r\n\r\n        createMergedFieldsConfigParser(\r\n            spFields: SP.Field[],\r\n            fields: void | TFieldConfig,\r\n            list: IList,\r\n            defaultFieldsConfigParser: IDefaultFieldsConfigParser,\r\n            userFieldsConfigParser: IUserFieldsConfigParser\r\n\r\n        ): IMergedFieldsConfigParser;\r\n\r\n        createUserFieldsConfigParser(\r\n            spFields: SP.Field[],\r\n            userFields: boolean | TFieldConfig,\r\n            list: IList\r\n\r\n        ): IUserFieldsConfigParser;\r\n\r\n        createDefaultFieldsConfigParser(\r\n            spFields: SP.Field[],\r\n            defaultFields: boolean | TFieldConfig,\r\n            list: IList\r\n\r\n        ): IDefaultFieldsConfigParser;\r\n\r\n        //#endregion - Field parsing\r\n\r\n        //#region SharePoint objects\r\n\r\n        /**\r\n         * Use this for mocking.\r\n         */\r\n        createSPClientContext(serverRelativeUrl?: string): SP.ClientContext;\r\n\r\n        /**\r\n         * Use this for mocking.\r\n         */\r\n        createSPCamlQuery(): SP.CamlQuery;\r\n\r\n        /**\r\n         * Use this for mocking.\r\n         */\r\n        createSPFieldUrlValue(url?: string, description?: string): SP.FieldUrlValue;\r\n\r\n        /**\r\n         * Use this for mocking.\r\n         */\r\n        createSPFieldUserValue(id?: number): SP.FieldUserValue;\r\n\r\n        //#endregion - SharePoint objects\r\n    }\r\n}","namespace Fx.SharePoint.Client {\r\n\r\n    export interface ILoggerCreationContext {\r\n\r\n        itemId?: number;\r\n        fieldName?: string;\r\n        listName?: string;\r\n        contextUrl?: string;\r\n    }\r\n}","namespace Fx.SharePoint.Client {\r\n\r\n    export interface ICloneable {\r\n        clone(): any;\r\n    }\r\n}","namespace Fx.SharePoint.Client {\r\n\r\n    export interface IQueue<T> {\r\n\r\n        /**\r\n         * Add an item to the queue.\r\n         */\r\n        enqueue(item: T): void;\r\n\r\n        /**\r\n         * Remove an item from queue.\r\n         */\r\n        dequeue(): T;\r\n\r\n        /**\r\n         * Remove all items from queue.\r\n         */\r\n        dequeueAll(): T[];\r\n    }\r\n}","namespace Fx.SharePoint.Client {\r\n\r\n    export interface ILogger {\r\n\r\n        itemId: number;\r\n        fieldName: string;\r\n        listName: string;\r\n        contextUrl: string;\r\n\r\n        /**\r\n         * Throw new Error.\r\n         * @param message string will be formatted. {0} -> actual. {1} -> expected.\r\n         */\r\n        error(message: string, options?: ILogOptions): void;\r\n\r\n        /**\r\n         * Warn the message.\r\n         * @param message string will be formatted. {0} -> actual. {1} -> expected.\r\n         */\r\n        warn(message: string, options?: ILogOptions): void;\r\n\r\n        /**\r\n         * Clone configuration from other logger.\r\n         */\r\n        clone(): ILogger;\r\n    }\r\n}","namespace Fx.SharePoint.Client {\r\n\r\n    export interface ILogOptions {\r\n        actual?: any;\r\n        expected?: any;\r\n\r\n        /**\r\n         * If set, this will overwrite Logger.creationContext for this call only.\r\n         */\r\n        creationContext?: ILoggerCreationContext;\r\n    }\r\n}","namespace Fx.SharePoint.Client {\r\n\r\n    export class Logger implements ILogger {\r\n\r\n        //#region Constructor\r\n\r\n        constructor(private creationContext: ILoggerCreationContext = {}) {}\r\n\r\n        //#endregion - Constructor\r\n\r\n        //#region Private Methods\r\n\r\n        private pretyMessage(message: string, options: ILogOptions = {}): string {\r\n            const context: ILoggerCreationContext = _.defaultsDeep(\r\n                {},\r\n                options.creationContext,\r\n                this.creationContext\r\n            );\r\n\r\n            return String.format(message, options.actual, options.expected) +\r\n                \"\\n\\n\" +\r\n                (context.itemId ?                   `-> Item Id        : '${context.itemId}'\\n` : \"\") +\r\n                (context.fieldName ?                `-> Field          : '${context.fieldName}'\\n` : \"\") +\r\n                (context.listName ?                 `-> List           : '${context.listName}'\\n` : \"\") +\r\n                (context.contextUrl ?               `-> Context Url    : '${context.contextUrl}'\\n` : \"\") +\r\n                (options.expected !== undefined ?   `-> Expected Value : '${options.expected}'\\n` : \"\") +\r\n                (options.actual !== undefined ?     `-> Actual Value   : '${options.actual}'\\n` : \"\");\r\n        }\r\n\r\n        //#endregion - Private Methods\r\n\r\n        //#region ILogger\r\n\r\n        get itemId(): number {\r\n            return this.creationContext.itemId;\r\n        }\r\n\r\n        set itemId(id: number) {\r\n            this.creationContext.itemId = id;\r\n        }\r\n\r\n        get fieldName(): string {\r\n            return this.creationContext.fieldName;\r\n        }\r\n\r\n        set fieldName(value: string) {\r\n            this.creationContext.fieldName = value;\r\n        }\r\n\r\n        get listName(): string {\r\n            return this.creationContext.listName;\r\n        }\r\n\r\n        set listName(value: string) {\r\n            this.creationContext.listName = value;\r\n        }\r\n\r\n        get contextUrl(): string {\r\n            return this.creationContext.contextUrl;\r\n        }\r\n\r\n        set contextUrl(value: string) {\r\n            this.creationContext.contextUrl = value;\r\n        }\r\n\r\n        error(message: string, options: ILogOptions): void {\r\n            throw new Error(this.pretyMessage(message, options));\r\n        }\r\n\r\n        warn(message: string, options: ILogOptions): void {\r\n            console.warn(\"Warning: \" + this.pretyMessage(message, options));\r\n        }\r\n\r\n        clone(): ILogger {\r\n            return new Logger({\r\n                itemId: this.itemId,\r\n                fieldName: this.fieldName,\r\n                listName: this.listName,\r\n                contextUrl: this.contextUrl\r\n            });\r\n        }\r\n\r\n        //#endregion - ILogger\r\n    }\r\n}","namespace Fx.SharePoint.Client {\r\n}","namespace Fx.SharePoint.Caml.Lists {\r\n\r\n    export class FieldRef extends CamlElement<ViewFields, IFieldRefAttrs, IFieldRefContent> {\r\n\r\n    }\r\n}","// see `field` section: https://msdn.microsoft.com/en-us/library/office/ms437580.aspx\r\n\r\nnamespace Fx.SharePoint.Caml.Lists {\r\n\r\n    export type FieldType =\r\n        \"Boolean\" | \"Choice\" | \"MultiChoice\" | \"Computed\" | \"Counter\" |\r\n        \"Currency\" | \"DateTime\" | \"Guid\" | \"Lookup\" | \"LookupMulti\" | \"Note\" |\r\n        \"Number\" | \"User\" | \"UserMulti\";\r\n\r\n\r\n    export interface IFieldRefAttrs extends IElementAttrs {\r\n\r\n        name: string;\r\n        type?: FieldType;\r\n    }\r\n}","namespace Fx.SharePoint.Caml.Lists {\r\n\r\n    export interface IFieldRefContent extends IElementContent {\r\n\r\n    }\r\n}","namespace Fx.SharePoint.Caml.Lists {\r\n\r\n    export interface IJoinsAttrs extends IElementAttrs {\r\n    }\r\n}","namespace Fx.SharePoint.Caml.Lists {\r\n\r\n    export interface IJoinsContent extends IElementContent {\r\n    }\r\n}","namespace Fx.SharePoint.Caml.Lists {\r\n\r\n    export interface IQueryAttrs extends IElementAttrs {\r\n    }\r\n}","namespace Fx.SharePoint.Caml.Lists {\r\n\r\n    //#region Import\r\n\r\n    import Where = Queries.Where;\r\n    import GroupBy = Queries.GroupBy;\r\n    import OrderBy = Queries.OrderBy;\r\n\r\n    //#endregion - Import\r\n\r\n    export interface IQueryContent extends IElementContent {\r\n        where?: Where;\r\n        groupBy?: GroupBy;\r\n        orderBy?: OrderBy;\r\n    }\r\n}","namespace Fx.SharePoint.Caml.Lists {\r\n\r\n    export interface IRowLimitAttrs extends IElementAttrs {\r\n    }\r\n}","namespace Fx.SharePoint.Caml.Lists {\r\n\r\n    export interface IRowLimitContent extends IElementContent {\r\n\r\n        value: number;\r\n    }\r\n}","namespace Fx.SharePoint.Caml.Lists {\r\n\r\n    export interface IViewAttrs extends IElementAttrs {\r\n        scope?: \"FilesOnly\" | \"Recursive\" | \"RecursiveAll\";\r\n    }\r\n}","namespace Fx.SharePoint.Caml.Lists {\r\n\r\n    //#region Import\r\n\r\n    import ProjectedFields = Views.ProjectedFields;\r\n\r\n    //#endregion - Import\r\n\r\n    export interface IViewContent extends IElementContent {\r\n\r\n        joins?: Joins;\r\n        query?: Query;\r\n        rowLimit?: RowLimit;\r\n        projectedFields?: ProjectedFields;\r\n        viewFields?: ViewFields;\r\n    }\r\n}","namespace Fx.SharePoint.Caml.Lists {\r\n\r\n    export interface IViewFieldsAttrs extends IElementAttrs {\r\n    }\r\n}","namespace Fx.SharePoint.Caml.Lists {\r\n\r\n    export interface IViewFieldsContent extends IElementContent {\r\n\r\n        fields?: FieldRef[]\r\n    }\r\n}","namespace Fx.SharePoint.Caml.Lists {\r\n\r\n    export class Joins extends CamlElement<View, IJoinsAttrs, IJoinsContent> {\r\n\r\n    }\r\n}","namespace Fx.SharePoint.Caml.Lists {\r\n\r\n    export class Query extends CamlElement<View, IQueryAttrs, IQueryContent> {\r\n\r\n    }\r\n}","namespace Fx.SharePoint.Caml.Lists {\r\n\r\n    export class RowLimit extends CamlElement<View, IRowLimitAttrs, IRowLimitContent> {\r\n\r\n    }\r\n}","namespace Fx.SharePoint.Caml.Lists {\r\n\r\n    export class View extends CamlElement<ICamlElement, IViewAttrs, IViewContent> {\r\n\r\n    }\r\n}","namespace Fx.SharePoint.Caml.Lists {\r\n\r\n    export class ViewFields extends CamlElement<View, IViewFieldsAttrs, IViewFieldsContent> {\r\n    \r\n    }\r\n}","namespace Fx.SharePoint.Caml.Views {\r\n\r\n    export interface IProjectedFieldsAttrs extends IElementAttrs {\r\n    }\r\n}","namespace Fx.SharePoint.Caml.Views {\r\n\r\n    export interface IProjectedFieldsContent extends IElementContent {\r\n        \r\n    }\r\n} ","namespace Fx.SharePoint.Caml.Views {\r\n\r\n    //#region Import\r\n\r\n    import View = Lists.View;\r\n\r\n    //#endregion - Import\r\n\r\n    export class ProjectedFields extends CamlElement<View, IProjectedFieldsAttrs, IProjectedFieldsContent> {\r\n    \r\n    }\r\n}","namespace Fx.SharePoint.Caml.Queries {\r\n\r\n    export class Eq<\r\n\r\n            TAttrs extends IEqAttrs,\r\n            TContent extends IEqContent\r\n\r\n        > extends SingleValueBinaryOperator<\r\n\r\n            TAttrs,\r\n            TContent\r\n\r\n        > {\r\n            \r\n    }\r\n}","namespace Fx.SharePoint.Caml.Queries {\r\n\r\n    export class FieldRef extends CamlElement<\r\n\r\n            OrderBy | ComparisonOperator<IComparisonOperatorAttrs, IComparisonOperatorContent>,\r\n            IFieldRefAttrs,\r\n            IFieldRefContent\r\n\r\n        > {\r\n\r\n    }\r\n}","namespace Fx.SharePoint.Caml.Queries {\r\n\r\n    //#region Import\r\n\r\n    import Query = Lists.Query;\r\n\r\n    //#endregion - Import\r\n\r\n    export class GroupBy extends CamlElement<Query, IGroupByAttrs, IGroupByContent> {\r\n    \r\n    }\r\n}","namespace Fx.SharePoint.Caml.Queries {\r\n\r\n    export interface IAndAttrs extends ILogicalJoinAttrs {\r\n    }\r\n}","namespace Fx.SharePoint.Caml.Queries {\r\n\r\n    export interface IAndContent extends ILogicalJoinContent {\r\n        \r\n    }\r\n}","namespace Fx.SharePoint.Caml.Queries {\r\n\r\n    export interface IEqAttrs extends ISingleValueBinaryOperatorAttrs {\r\n    }\r\n}","namespace Fx.SharePoint.Caml.Queries {\r\n\r\n    export interface IEqContent extends ISingleValueBinaryOperatorContent {\r\n        \r\n    }\r\n}","namespace Fx.SharePoint.Caml.Queries {\r\n\r\n    export interface IFieldRefAttrs extends IElementAttrs {\r\n\r\n        name?: string;\r\n    }\r\n}","namespace Fx.SharePoint.Caml.Queries {\r\n\r\n    export interface IFieldRefContent extends IElementContent {\r\n    \r\n    }\r\n}","namespace Fx.SharePoint.Caml.Queries {\r\n\r\n    export interface IGroupByAttrs extends IElementAttrs {\r\n    }\r\n}","namespace Fx.SharePoint.Caml.Queries {\r\n\r\n    export interface IGroupByContent extends IElementContent {\r\n        \r\n    }\r\n}","namespace Fx.SharePoint.Caml.Queries {\r\n\r\n    export interface IInAttrs extends IMultipleValueBinaryOperatorAttrs {\r\n    }\r\n}","namespace Fx.SharePoint.Caml.Queries {\r\n\r\n    export interface IInContent extends IMultipleValueBinaryOperatorContent {\r\n        \r\n    }\r\n}","namespace Fx.SharePoint.Caml.Queries {\r\n\r\n    export class In extends MultipleValueBinaryOperator<IInAttrs, IInContent> {\r\n            \r\n    }\r\n}","namespace Fx.SharePoint.Caml.Queries {\r\n\r\n    export interface IOrAttrs extends ILogicalJoinAttrs {\r\n    }\r\n}","namespace Fx.SharePoint.Caml.Queries {\r\n\r\n    export interface IOrContent extends ILogicalJoinContent {\r\n        \r\n    }\r\n}","namespace Fx.SharePoint.Caml.Queries {\r\n\r\n    export interface IOrderByAttrs extends IElementAttrs {\r\n    }\r\n}","namespace Fx.SharePoint.Caml.Queries {\r\n\r\n    export interface IOrderByContent extends IElementContent {\r\n        \r\n    }\r\n}","namespace Fx.SharePoint.Caml.Queries {\r\n\r\n    export interface ITodayAttrs extends IElementAttrs {\r\n    }\r\n}","namespace Fx.SharePoint.Caml.Queries {\r\n\r\n    export interface ITodayContent extends IElementContent {\r\n    \r\n    }\r\n}","namespace Fx.SharePoint.Caml.Queries {\r\n\r\n    export interface IValueAttrs extends IElementAttrs {\r\n\r\n        type: \"Text\" | \"Integer\" | \"DateTime\";\r\n        includeTimeValue?: boolean;\r\n    }\r\n}","namespace Fx.SharePoint.Caml.Queries {\r\n\r\n    export interface IValueContent extends IElementContent {\r\n\r\n        value?: Today | string | number | boolean;\r\n    }\r\n}","namespace Fx.SharePoint.Caml.Queries {\r\n\r\n    export interface IValuesAttrs extends IElementAttrs {\r\n    }\r\n}","namespace Fx.SharePoint.Caml.Queries {\r\n\r\n    export interface IValuesContent extends IElementContent {\r\n\r\n        values?: Value[];\r\n    }\r\n}","namespace Fx.SharePoint.Caml.Queries {\r\n\r\n    export interface IWhereAttrs extends IElementAttrs {\r\n    }\r\n}","namespace Fx.SharePoint.Caml.Queries {\r\n\r\n    export interface IWhereContent extends IElementContent {\r\n\r\n        condition: LogicalJoin<ILogicalJoinAttrs, ILogicalJoinContent> | ComparisonOperator<IComparisonOperatorAttrs, IComparisonOperatorContent>;\r\n    }\r\n}","namespace Fx.SharePoint.Caml.Queries {\r\n\r\n    //#region Import\r\n\r\n    import Query = Lists.Query;\r\n\r\n    //#endregion - Import\r\n\r\n    export class OrderBy extends CamlElement<Query, IOrderByAttrs, IOrderByContent> {\r\n    \r\n    }\r\n}","namespace Fx.SharePoint.Caml.Queries {\r\n\r\n    export class Today extends CamlElement<Value, ITodayAttrs, ITodayContent> {\r\n    \r\n    }\r\n}","namespace Fx.SharePoint.Caml.Queries {\r\n\r\n    export class Value extends CamlElement<\r\n\r\n            Values | ComparisonOperator<IComparisonOperatorAttrs, IComparisonOperatorContent>,\r\n            IValueAttrs,\r\n            IValueContent\r\n\r\n        > {\r\n        \r\n    }\r\n}","namespace Fx.SharePoint.Caml.Queries {\r\n\r\n    export class Values extends CamlElement<In, IValuesAttrs, IValuesContent> {\r\n    \r\n    }\r\n}","namespace Fx.SharePoint.Caml.Queries {\r\n\r\n    //#region Import\r\n\r\n    import Query = Lists.Query;\r\n\r\n    //#endregion - Import\r\n\r\n    export class Where extends CamlElement<Query, IWhereAttrs, IWhereContent> {\r\n    \r\n    }\r\n}","namespace Fx.SharePoint.Client {\r\n\r\n    export interface IListFieldCollection {\r\n\r\n        length: number;\r\n        [index: number]: IListField;\r\n    }\r\n}","namespace Fx.SharePoint.Client {\r\n\r\n    /**\r\n     * Represent an object with value will be resolved in furture.\r\n     */\r\n    export interface IDeferValue<T extends IListItem | IListItemCollection> {\r\n\r\n        value: T;\r\n    }\r\n}","namespace Fx.SharePoint.Client {\r\n\r\n    export interface IListItem {\r\n        /**\r\n         * Parent list which this item belong to.\r\n         */\r\n        get_parentList(): IList;\r\n\r\n        /**\r\n         * Internal SharePoint list item.\r\n         */\r\n        get_spItem(): SP.ListItem;\r\n\r\n        /**\r\n         * Get data of the field identified by internal name.\r\n         */\r\n        getData(field: string | IListField): any;\r\n\r\n        /**\r\n         * Set data of field identified by internal name.\r\n         */\r\n        setData(field: string | IListField, value: any): void;\r\n\r\n        /**\r\n         * Infrastructure method. Not intended to be used by user code.\r\n         */\r\n        getOriginalData(fieldName: string | IListField): any;\r\n\r\n        /**\r\n         * Original data is used to compare with `data`. If different -> call SPListItem.set_item().\r\n         * Infrastructure method. Not intended to be used by user code.\r\n         */\r\n        setOriginalData(fieldName: string | IListField, value: any): void;\r\n\r\n        /**\r\n         * SPListItem data -> field parsers -> this.$$private.fielData.\r\n         * This function MUST be called after get item from server for the first time\r\n         * or to refresh data of this item after update.\r\n         */\r\n        $init(): ng.IPromise<void>;\r\n\r\n        /**\r\n         * this.$$private.fieldData -> field parsers -> SPListItem data.\r\n         * Call this function when need to update data from field data -> real sp list item.\r\n         */\r\n        $update(): ng.IPromise<void>;\r\n\r\n        id: number;\r\n    }\r\n}","namespace Fx.SharePoint.Client {\r\n\r\n    export interface IListItemCollection {\r\n\r\n        length: number;\r\n        [index: number]: IListItem;\r\n    }\r\n}","namespace Fx.SharePoint.Client {\r\n\r\n    export interface IListItemPrivateData {\r\n\r\n        spItem: SP.ListItem;\r\n        list: IList;\r\n\r\n        state: ListItemState;\r\n        logger: ILogger;\r\n\r\n        allListFields: IListFieldCollection;\r\n\r\n        /**\r\n         * Use to check if data changed since last retrieved/updated.\r\n         */\r\n        getData(fieldName: string): any;\r\n\r\n        /**\r\n         * Set data to `fieldData`.\r\n         */\r\n        setData(fieldName: string, value: any): void;\r\n\r\n        /**\r\n         * Infrastructure method. Not intended to be used by user code.\r\n         */\r\n        getOriginalData(fieldName: string): any;\r\n\r\n        /**\r\n         * Infrastructure method. Not intended to be used by user code.\r\n         */\r\n        setOriginalData(fieldName: string, value: any): void;\r\n\r\n        /**\r\n         * Clear current and original data.\r\n         */\r\n        clearData(): void;\r\n    }\r\n}","namespace Fx.SharePoint.Client {\r\n\r\n    /**\r\n     * All immediate values are stored in `$$private.fieldData` field.\r\n     */\r\n    export class ListItem implements IListItem {\r\n\r\n        //#region Fields\r\n\r\n        protected $$private: IListItemPrivateData;\r\n\r\n        //#endregion - Fields\r\n\r\n        //#region Constructor\r\n\r\n        constructor(spItem: SP.ListItem, list: IList) {\r\n            this.$$private = factory().createListItemPrivateData(spItem, list);\r\n        }\r\n\r\n        //#endregion - Constructor\r\n        \r\n        //#region Public Methods\r\n\r\n        /**\r\n         * SPListItem data -> field parsers -> this.$$private.fielData.\r\n         * This function MUST be called after get item from server for the first time\r\n         * or to refresh data of this item after update.\r\n         */\r\n        $init(): ng.IPromise<void> {\r\n            this.$$private.state = ListItemState.Initializing;\r\n\r\n            return this.retrieveItemFieldsData()\r\n                .then(() => {\r\n                    // Define a property for each field.\r\n                    _.forEach(\r\n                        this.$$private.allListFields,\r\n                        field => {\r\n                            Object.defineProperty(\r\n                                (this as any).__proto__,\r\n                                _.lowerFirst(field.internalName),\r\n                                {\r\n                                    enumerable: true,\r\n                                    configurable: true,\r\n                                    get: () => this.getData(field),\r\n                                    set: (value: any) => this.setData(field, value)\r\n                                }\r\n                            );\r\n                        }\r\n                    );\r\n                })\r\n                .then(() => {\r\n                    this.$$private.state = ListItemState.Initialized;\r\n                });\r\n        }\r\n\r\n        /**\r\n         * this.$$private.fieldData -> field parsers -> SPListItem data.\r\n         */\r\n        $update(): ng.IPromise<void> {\r\n            return $q()\r\n                .all(\r\n                    _.map(\r\n                        this.$$private.allListFields,\r\n                        field => field.parseRequest(this) // set data to SPListItem\r\n                    )\r\n                )\r\n                .then(() => {\r\n                    // Delete all old properties and data.\r\n                    this.resetListItem();\r\n\r\n                    // Set state to not initialized to wait for post-commit \r\n                    // operation refreshing this object.\r\n                    this.$$private.state = ListItemState.NotInitialized;\r\n                });\r\n        }\r\n\r\n        //#endregion - Public Methods\r\n\r\n        //#region Private Methods\r\n\r\n        private getFieldName(field: string | IListField): string {\r\n            return (typeof field === \"string\")\r\n                ? field\r\n                : field.internalName;\r\n        }\r\n\r\n        /**\r\n         * Remove all properties and data.\r\n         */\r\n        private resetListItem() {\r\n            const fieldNames = _.map(this.$$private.allListFields, f => f.internalName);\r\n\r\n            _.forEach(fieldNames, name => {\r\n                const proto = (this as any).__proto__;\r\n                const propName = _.lowerFirst(name);\r\n\r\n                delete proto[propName];\r\n            });\r\n\r\n            this.$$private.clearData();\r\n        }\r\n\r\n        /**\r\n         * Get data for all fields of this list item (include user and look up field)\r\n         * then store them in $$private.\r\n         */\r\n        private retrieveItemFieldsData(): ng.IPromise<void> {\r\n            const promises = _.map(\r\n                this.$$private.allListFields,\r\n                field => field.parseResponse(this) // set data to this.$$private.fieldOriginalData\r\n            );\r\n\r\n            const listItemContext = this.get_parentList()\r\n                .get_serviceContext()\r\n                .getGetListItemSessionContext(this);\r\n\r\n            return listItemContext.retrieveData()\r\n                .then(() => $q().all(promises))\r\n                .then(() => listItemContext.finalize());\r\n        } \r\n\r\n        //#endregion - Private Methods\r\n\r\n        //#region IListItem\r\n\r\n        get id(): number {\r\n            return this.$$private.spItem.get_id();\r\n        };\r\n\r\n        set id(id: number) {\r\n            throw new Error(\"'Id' field is readonly. It can not be set.\");\r\n        }\r\n\r\n        get_parentList(): IList {\r\n            return this.$$private.list;\r\n        }\r\n\r\n        get_spItem(): SP.ListItem {\r\n            return this.$$private.spItem;\r\n        }\r\n\r\n        /**\r\n         * Get data from $$private.fieldData.\r\n         */\r\n        getData(field: string | IListField): any {\r\n            const fieldName = this.getFieldName(field);\r\n\r\n            //#region Validate\r\n\r\n            if (this.$$private.state !== ListItemState.Initialized) {\r\n                this.$$private.logger.error(\r\n                    `Can not get data of uninitialized list item.`,\r\n                    {\r\n                        creationContext: {\r\n                            fieldName: fieldName\r\n                        }\r\n                    }\r\n                );\r\n            }\r\n\r\n            //#endregion - Validate\r\n            \r\n            return this.$$private.getData(fieldName);\r\n        }\r\n\r\n        /**\r\n         * Set data to $$private.fieldData.\r\n         * Add a `updateItem` command to service context.\r\n         */\r\n        setData(field: string | IListField, value: any): void {\r\n            // Use null instead of undefined.\r\n            value = (value === undefined) ? null : value;\r\n            const fieldName = this.getFieldName(field);\r\n\r\n            //#region Validate\r\n\r\n            if (this.$$private.state !== ListItemState.Initialized) {\r\n                this.$$private.logger.error(\r\n                    `Can not set data of uninitialized list item.`,\r\n                    {\r\n                        creationContext: {\r\n                            fieldName: fieldName\r\n                        }\r\n                    }\r\n                );\r\n            }\r\n\r\n            //#endregion - Validate\r\n            \r\n            const listField = _.find(\r\n                this.$$private.allListFields,\r\n                f => f.internalName === fieldName\r\n            );\r\n\r\n            // Ignore if field not found.\r\n            if (!listField) return;\r\n\r\n            this.$$private.setData(fieldName, value);\r\n            this.$$private.list.get_serviceContext().addPending(this);\r\n        }\r\n\r\n        /**\r\n         * Infrastructure method. Not intended to be used by user code.\r\n         */\r\n        getOriginalData(field: string | IListField): any {\r\n            const fieldName = this.getFieldName(field);\r\n            return this.$$private.getOriginalData(fieldName);\r\n        }\r\n\r\n        /**\r\n         * Infrastructure method. Not intended to be used by user code.\r\n         */\r\n        setOriginalData(field: string | IListField, value: any): void {\r\n            const fieldName = this.getFieldName(field);\r\n            this.$$private.setOriginalData(fieldName, value);\r\n        }\r\n\r\n        //#endregion - IListItem\r\n    }\r\n}","namespace Fx.SharePoint.Client {\r\n\r\n    export class ListItemPrivateData implements IListItemPrivateData {\r\n\r\n        //#region Fields\r\n\r\n        state: ListItemState;\r\n        logger: ILogger;\r\n\r\n        private fieldData: TItemFieldData = {};\r\n        private fieldOriginalData: TItemFieldData = {};\r\n\r\n        //#endregion - Fields\r\n    \r\n        //#region Constructor\r\n\r\n        constructor(\r\n            public spItem: SP.ListItem,\r\n            public list: IList\r\n        ) {\r\n            this.state = ListItemState.NotInitialized;\r\n            this.logger = factory().createLogger({\r\n                itemId: this.spItem.get_id(),\r\n                listName: this.list.get_listConfig().listName,\r\n                contextUrl: this.list.get_serviceContext().clientContext.get_url()\r\n            });\r\n        }\r\n\r\n        //#endregion - Constructor\r\n\r\n        //#region Private Methods\r\n\r\n        private getCloneIfPossible(objToClone: any): any {\r\n            if (_.isArray(objToClone)) {\r\n                return _.map(\r\n                    objToClone as any[],\r\n                    elem => this.getCloneIfPossible(elem)\r\n                );\r\n            }\r\n\r\n            const cloneFn = objToClone && objToClone.clone;\r\n\r\n            return _.isFunction(cloneFn)\r\n                ? (cloneFn as Function).call(objToClone)\r\n                : objToClone;\r\n        }\r\n\r\n        //#endregion - Private Methods\r\n\r\n        //#region IListItemPrivateData\r\n\r\n        get allListFields(): IListFieldCollection {\r\n            return this.list.get_fields();\r\n        }\r\n\r\n\r\n        getData(fieldName: string): any {\r\n            const currentValue = this.fieldData[fieldName];\r\n            if (currentValue !== undefined) return currentValue;\r\n\r\n            // This need to clone!\r\n            // Otherwise, current value and original value will point to the same object.\r\n            const originalValue = this.getCloneIfPossible(this.fieldOriginalData[fieldName]);\r\n            return (this.fieldData[fieldName] = originalValue);\r\n        }\r\n\r\n        setData(fieldName: string, value: any): void {\r\n            this.fieldData[fieldName] = value;\r\n        }\r\n\r\n        getOriginalData(fieldName: string): any {\r\n            return this.fieldOriginalData[fieldName];\r\n        }\r\n\r\n        setOriginalData(fieldName: string, value: any): void {\r\n            this.fieldOriginalData[fieldName] = value;\r\n        }\r\n\r\n        clearData(): void {\r\n            this.fieldData = {};\r\n            this.fieldOriginalData = {};\r\n        }\r\n\r\n        //#endregion - IListItemPrivateData\r\n    }\r\n}","namespace Fx.SharePoint.Client {\r\n\r\n    export enum ListItemState {\r\n\r\n        NotInitialized,\r\n        Initializing,\r\n        Initialized\r\n    }\r\n}","namespace Fx.SharePoint.Client {\r\n\r\n    export type TItemFieldData = {\r\n        [key: string]: any;\r\n    };\r\n}","namespace Fx.SharePoint.Client {\r\n\r\n    export interface IList {\r\n        get_listConfig(): IListConfig;\r\n\r\n        get_fields(): IListFieldCollection;\r\n        get_serviceContext(): IServiceContext;\r\n        get_defaultFieldConfigs(): IFieldConfig[];\r\n        get_logger(): ILogger;\r\n\r\n        getByIdAsync(id: number, options?: IListOperationOptions): ng.IPromise<IListItem>;\r\n        getManyAsync(options?: IListOperationOptions): ng.IPromise<IListItemCollection>;\r\n\r\n        deleteItemAsync(listItem: IListItem): ng.IPromise<void>;\r\n    }\r\n}","namespace Fx.SharePoint.Client {\r\n\r\n    export interface IListOperationOptions {\r\n\r\n        /**\r\n         * If true, push this request operation to a queue.\r\n         * Default: false\r\n         */\r\n        defer?: boolean;\r\n    }\r\n}","namespace Fx.SharePoint.Client {\r\n\r\n    export type TListOperationResult<T extends (IListItem | IListItemCollection)> =\r\n        IDeferValue<T> | ng.IPromise<T>;\r\n        \r\n}","namespace Fx.SharePoint.Caml.Queries {\r\n\r\n    export interface IBinaryOperatorAttrs extends IComparisonOperatorAttrs {\r\n    }\r\n}","namespace Fx.SharePoint.Caml.Queries {\r\n\r\n    export interface IBinaryOperatorContent extends IComparisonOperatorContent {\r\n        \r\n    }\r\n}","namespace Fx.SharePoint.Caml.Queries {\r\n\r\n    export interface IComparisonOperatorAttrs extends IElementAttrs {\r\n    }\r\n}","namespace Fx.SharePoint.Caml.Queries {\r\n\r\n    export interface IComparisonOperatorContent extends IElementContent {\r\n        fieldRef: FieldRef;\r\n    }\r\n}","namespace Fx.SharePoint.Caml.Queries {\r\n\r\n    export interface ILogicalJoinAttrs extends IElementAttrs {\r\n        \r\n    }\r\n}","namespace Fx.SharePoint.Caml.Queries {\r\n\r\n    export interface ILogicalJoinContent extends IElementContent {\r\n\r\n        exp1: LogicalJoin<ILogicalJoinAttrs, ILogicalJoinContent> | ComparisonOperator<IComparisonOperatorAttrs, IComparisonOperatorContent>;\r\n        exp2: LogicalJoin<ILogicalJoinAttrs, ILogicalJoinContent> | ComparisonOperator<IComparisonOperatorAttrs, IComparisonOperatorContent>;\r\n    }\r\n}","namespace Fx.SharePoint.Caml.Queries {\r\n\r\n    export interface IMultipleValueBinaryOperatorAttrs extends IBinaryOperatorAttrs {\r\n    }\r\n}","namespace Fx.SharePoint.Caml.Queries {\r\n\r\n    export interface IMultipleValueBinaryOperatorContent extends IBinaryOperatorContent {\r\n\r\n        values: Values;\r\n    }\r\n}","namespace Fx.SharePoint.Caml.Queries {\r\n\r\n    export interface ISingleValueBinaryOperatorAttrs extends IBinaryOperatorAttrs {\r\n    }\r\n}","namespace Fx.SharePoint.Caml.Queries {\r\n\r\n    export interface ISingleValueBinaryOperatorContent extends IBinaryOperatorContent {\r\n\r\n        value: Value;\r\n    }\r\n}","namespace Fx.SharePoint.Caml.Queries {\r\n\r\n    export interface IUnaryOperatorAttrs extends IComparisonOperatorAttrs {\r\n    }\r\n}","namespace Fx.SharePoint.Caml.Queries {\r\n\r\n    export interface IUnaryOperatorContent extends IComparisonOperatorContent {\r\n        \r\n    }\r\n}","namespace Fx.SharePoint.Client {\r\n\r\n    /**\r\n     * Actions that are invoked when before and/or after ClientContext.executeQueryAsync().\r\n     */\r\n    export interface ICommitOperation<TItem> {\r\n\r\n        /**\r\n         * Item that are waiting for commit event.\r\n         */\r\n        item: TItem;\r\n\r\n        /**\r\n         * Invoke pending operation. Call this function BEFORE ClientContext.executeQueryAsync()\r\n         */\r\n        preCommitInvoke(): ng.IPromise<void>;\r\n\r\n        /**\r\n         * Invoke pending operation. Call this function AFTER ClientContext.executeQueryAsync()\r\n         */\r\n        postCommitInvoke(): ng.IPromise<void>;\r\n    }\r\n}","namespace Fx.SharePoint.Client {\r\n\r\n    export interface IPendingQueue extends IQueue<ICommitOperation<any>> {\r\n\r\n    }\r\n}","namespace Fx.SharePoint.Client {\r\n\r\n    /**\r\n     * Represent an object that only exists while getting data for\r\n     * specified list item.\r\n     */\r\n    export interface IGetListItemSessionContext extends ISessionContext {\r\n\r\n        get_listItem(): IListItem;\r\n\r\n        getLookupItem(itemId: number, listId: string, fields: string[]): ng.IPromise<IListItem>;\r\n\r\n        /**\r\n         * Get all data requested (user, lookup) from server.\r\n         */\r\n        retrieveData(): ng.IPromise<void>;\r\n    }\r\n}","namespace Fx.SharePoint.Client {\r\n\r\n    /**\r\n     * Represent an object that only exists for a session (period of time)\r\n     * in IServiceContext.\r\n     */\r\n    export interface ISessionContext {\r\n\r\n        /**\r\n         * Get IServiceContext object associated with this session.\r\n         */\r\n        get_serviceContext(): IServiceContext;\r\n\r\n        /**\r\n         * Call this function to notify ServiceContext to finalize this object.\r\n         */\r\n        finalize(): void;\r\n    }\r\n}","namespace Fx.SharePoint.Client {\r\n\r\n    export interface ISessionContextManager {\r\n\r\n        getGetListItemSession(listItem: IListItem): IGetListItemSessionContext;\r\n\r\n        finalize(session: ISessionContext): void;\r\n    }\r\n}","namespace Fx.SharePoint.Client {\r\n\r\n    export class SessionContextManager implements ISessionContextManager {\r\n\r\n        //#region Fields\r\n\r\n        private getListItemSessionContexts: IGetListItemSessionContext[] = [];\r\n\r\n        //#endregion - Fields\r\n\r\n        //#region Constructor\r\n\r\n        constructor(private serviceContext: IServiceContext) {\r\n        }\r\n\r\n        //#endregion - Constructor\r\n\r\n        //#region Properties\r\n\r\n        private get sessionContextsList(): ISessionContext[][] {\r\n            return [\r\n                this.getListItemSessionContexts\r\n            ];\r\n        }\r\n\r\n        //#endregion - Properties\r\n\r\n        //#region ISessionContextManager\r\n\r\n        getGetListItemSession(listItem: IListItem): IGetListItemSessionContext {\r\n            let context = _.find(\r\n                this.getListItemSessionContexts,\r\n                context => context.get_listItem() === listItem\r\n            );\r\n\r\n            if (!context) {\r\n                context = factory().createGetListItemSessionContext(this.serviceContext, listItem);\r\n                this.getListItemSessionContexts.push(context);\r\n            }\r\n\r\n            return context;\r\n        }\r\n\r\n        finalize(session: ISessionContext): void {\r\n            _.forEach(this.sessionContextsList, list => _.pull(list, session));\r\n        }\r\n\r\n        //#endregion - ISessionContextManager\r\n    }\r\n}","namespace Fx.SharePoint.Client {\r\n\r\n    //#region Constants\r\n\r\n    const DEFAULT_CONFIGS: INamedFieldConfigLiteral = {\r\n        name: undefined,\r\n        active: true,\r\n        json: false,\r\n        expand: false\r\n    };\r\n\r\n    //#endregion - Constants\r\n\r\n    export class FieldConfig implements IFieldConfig {\r\n\r\n        //#region Fields\r\n\r\n        protected logger: ILogger;\r\n\r\n        //#endregion - Fields\r\n    \r\n        //#region Constructor\r\n\r\n        constructor(\r\n            private configLiteral: INamedFieldConfigLiteral,\r\n            private listConfig: IListConfig\r\n        ) {\r\n            this.configLiteral = _.defaultsDeep<Object, INamedFieldConfigLiteral>(\r\n                {},\r\n                configLiteral,\r\n                DEFAULT_CONFIGS\r\n            );\r\n\r\n            this.logger = factory().createLogger({\r\n                listName: this.listName,\r\n                contextUrl: this.contextUrl\r\n            });\r\n\r\n            //#region Validate\r\n\r\n            if (!this.configLiteral.name) {\r\n                this.logger.error(\r\n                    `Expect field config object has value for 'name' property, but got '${this.configLiteral.name}'.`\r\n                );\r\n            }\r\n\r\n            //#endregion - Validate\r\n\r\n            this.logger.fieldName = this.configLiteral.name;\r\n            \r\n            this.name = this.configLiteral.name;\r\n            this.active = !!this.configLiteral.active;\r\n            this.json = !!this.configLiteral.json;\r\n            this.expand = this.getExpandConfig(this.configLiteral.expand);\r\n            this.parsers.request = this.getParsingHandlers(this.configLiteral.parsers && this.configLiteral.parsers.request);\r\n            this.parsers.response = this.getParsingHandlers(this.configLiteral.parsers && this.configLiteral.parsers.response);\r\n        }\r\n\r\n        //#endregion - Constructor\r\n\r\n        //#region Properties\r\n\r\n        protected get listName(): string {\r\n            return this.get_listConfig().listName;\r\n        }\r\n\r\n        protected get contextUrl(): string {\r\n            return this.get_listConfig().getList().get_serviceContext().clientContext.get_url();\r\n        }\r\n\r\n        //#endregion - Properties\r\n\r\n        //#region Private Methods\r\n\r\n        private getExpandConfig(expandConfig: any): boolean | string[] {\r\n            if (typeof expandConfig === \"boolean\") {\r\n                return expandConfig;\r\n            }\r\n\r\n            if (_.isArray(expandConfig)) {\r\n                const valid = _.every(expandConfig, config => _.isString(config));\r\n\r\n                if (!valid) {\r\n                    this.logger.error(\r\n                        `Expect expand is an array of string, but got '${expandConfig}'.`\r\n                    );\r\n                }\r\n\r\n                return expandConfig as string[];\r\n            }\r\n\r\n            this.logger.error(\r\n                `Expect expand is a boolean or an array of string, but got '${expandConfig}'.`\r\n            );\r\n        }\r\n\r\n        private getParsingHandlers(handler: any): IFieldParsingHandler[] {\r\n            const createSingleHandler = (singleValue: any): IFieldParsingHandler => {\r\n                if (_.isFunction(singleValue)) {\r\n                    return singleValue as IFieldParsingHandler;\r\n                }\r\n\r\n                this.logger.error(\r\n                    `Expect field handler is a function, but got '${singleValue}'`\r\n                );\r\n            };\r\n\r\n            if (!handler) return [];\r\n            return _.isArray(handler) ? _.map(handler, createSingleHandler) : [createSingleHandler(handler)];\r\n        }\r\n        \r\n        //#endregion - Private Methods\r\n\r\n        //#region IFieldConfig\r\n\r\n        name: string;\r\n        active: boolean;\r\n        json: boolean;\r\n        expand: boolean | string[];\r\n\r\n        parsers: {\r\n            request: IFieldParsingHandler[];\r\n            response: IFieldParsingHandler[];\r\n        } = {\r\n            request: null,\r\n            response: null\r\n        };\r\n\r\n        get_listConfig(): IListConfig {\r\n            return this.listConfig;\r\n        }\r\n        \r\n        //#endregion - IFieldConfig\r\n    }\r\n}","namespace Fx.SharePoint.Client {\r\n\r\n    /**\r\n     * Override optional property and property type.\r\n     */\r\n    export interface IFieldConfig extends INamedFieldConfigLiteral {\r\n\r\n        /**\r\n         * Use this field config or not.\r\n         */\r\n        active: boolean;\r\n\r\n        /**\r\n         * Only apply to multi line text field.\r\n         * Default: false.\r\n         */\r\n        json: boolean;\r\n\r\n        /**\r\n         * Expand properties of user or lookup field.\r\n         * Default: false.\r\n         */\r\n        expand: boolean | string[];\r\n\r\n        /**\r\n         * Contains parsers for parsing request and response list item.\r\n         */\r\n        parsers: {\r\n\r\n            /**\r\n             * Parse the request object.\r\n             */\r\n            request: IFieldParsingHandler[];\r\n\r\n            /**\r\n             * Parse the response object.\r\n             */\r\n            response: IFieldParsingHandler[];\r\n        }\r\n\r\n        get_listConfig(): IListConfig;\r\n    }\r\n}","namespace Fx.SharePoint.Client {\r\n\r\n    /**\r\n     * This interface is only used in JavaScript. In this project, use IFieldConfig instead.\r\n     */\r\n    export interface IFieldConfigLiteral {\r\n\r\n        /**\r\n         * Default: true.\r\n         */\r\n        active?: boolean;\r\n\r\n        /**\r\n         * Only apply to multi line text field.\r\n         * Default: false.\r\n         */\r\n        json?: boolean;\r\n\r\n        /**\r\n         * Expand properties of user or lookup field.\r\n         * Default: false.\r\n         */\r\n        expand?: boolean | string[];\r\n    \r\n        /**\r\n         * Contains parsers for parsing request and response list item.\r\n         */\r\n        parsers?: {\r\n\r\n            /**\r\n             * Parse the request object.\r\n             */\r\n            request?: IFieldParsingHandler | IFieldParsingHandler[];\r\n\r\n            /**\r\n             * Parse the response object.\r\n             */\r\n            response?: IFieldParsingHandler | IFieldParsingHandler[];\r\n        }\r\n    }\r\n}","namespace Fx.SharePoint.Client {\r\n\r\n    /**\r\n     * This interface is only used in JavaScript. In this project, use IFieldConfig instead.\r\n     */\r\n    export interface INamedFieldConfigLiteral extends IFieldConfigLiteral {\r\n\r\n        /**\r\n         * Internal name of the fields.\r\n         */\r\n        name: string;\r\n    }\r\n}","namespace Fx.SharePoint.Client {\r\n\r\n    export enum FieldConfigMode {\r\n        /**\r\n         * Different meaning for each field config:\r\n         *     - IListConfig.fields: do nothing\r\n         *     - IListConfig.defaultFields: use ListBase.defaultFieldsLiteral\r\n         *     - IListConfig.userFields: use all user fields\r\n         */\r\n        Default,\r\n        /**\r\n         * Use specified values.\r\n         */\r\n        Overwrite,\r\n        /**\r\n         * Modify default value.\r\n         * In case of IListConfig.fields -> modify default of IListConfig.defaultFields\r\n         * and IListConfig.userFields.\r\n         */\r\n        Modify\r\n    }\r\n}","namespace Fx.SharePoint.Client {\r\n\r\n    export interface IDefaultFieldsConfigParser extends IFieldsConfigParser {\r\n        \r\n    }\r\n}","namespace Fx.SharePoint.Client {\r\n\r\n    /**\r\n     * @parameter\r\n     *  - fieldValue: current value of the field. It may be changed in piping.\r\n     *  - listItem: current list item.\r\n     * @return\r\n     *  - undefined: the field is left intact.\r\n     *  - !undefined: this will be the new value of the field.\r\n     */\r\n    export interface IFieldParsingHandler {\r\n        (fieldValue: any, listItem?: IListItem): (void | any) | ng.IPromise<void | any>;\r\n    }\r\n}","namespace Fx.SharePoint.Client {\r\n\r\n    export interface IFieldsConfigParser {\r\n\r\n        /**\r\n         * Get field config for any mode.\r\n         * @returns {} \r\n         */\r\n        getFieldConfigs(): IFieldConfig[];\r\n    }\r\n} ","namespace Fx.SharePoint.Client {\r\n\r\n    export interface IMergedFieldsConfigParser extends IFieldsConfigParser {\r\n\r\n        hasFieldConfigs: boolean;\r\n    }\r\n}","namespace Fx.SharePoint.Client {\r\n\r\n    export interface IUserFieldsConfigParser extends IFieldsConfigParser {\r\n        \r\n    }\r\n}","namespace Fx.SharePoint.Client {\r\n\r\n    export class FieldUtils {\r\n\r\n        static getFieldConfigs(config: void | boolean | TFieldConfig): IFieldConfig[] {\r\n            if (config == null || typeof config === \"boolean\")\r\n                return [];\r\n\r\n            return _.isArray(config)\r\n                ? config as IFieldConfig[]\r\n                : _.values<IFieldConfig>(config);\r\n        }\r\n\r\n        static removeFieldConfig(config: TFieldConfig, configToRemove: IFieldConfig): void {\r\n            if (_.isArray(config)) {\r\n                _.pull(config, configToRemove);\r\n            }\r\n            else {\r\n                delete config[configToRemove.name];\r\n            }\r\n        }\r\n    }\r\n}","namespace Fx.SharePoint.Client {\r\n\r\n    export interface IListField {\r\n\r\n        get_list(): IList;\r\n        get_fieldConfig(): IFieldConfig;\r\n\r\n        /**\r\n         * SPListItem data -> field parsers -> this.$$private.fieldData.\r\n         */\r\n        parseResponse(item: IListItem): ng.IPromise<void>;\r\n\r\n        /**\r\n         * this.$$private.fieldData -> field parsers -> SPListItem data.\r\n         */\r\n        parseRequest(item: IListItem): ng.IPromise<void>;\r\n\r\n        id: string;\r\n        internalName: string;\r\n        readOnlyField: boolean;\r\n        required: boolean;\r\n        fromBaseType: boolean;\r\n        schemaXml: string;\r\n    }\r\n}","namespace Fx.SharePoint.Client {\r\n\r\n    export interface IListFieldBoolean extends IListField {\r\n    \r\n    }\r\n}","namespace Fx.SharePoint.Client {\r\n\r\n    export interface IListFieldChoice extends IListFieldMultiChoice {\r\n    \r\n    }\r\n}","namespace Fx.SharePoint.Client {\r\n\r\n    export interface IListFieldDateTime extends IListField {\r\n    \r\n    }\r\n}","namespace Fx.SharePoint.Client {\r\n\r\n    export interface IListFieldLookup extends IListField {\r\n\r\n        allowMultipleValues: boolean;\r\n\r\n        /**\r\n         * A value that specifies the internal field name of the field used\r\n         * as the lookup values.\r\n         */\r\n        lookupField: string;\r\n\r\n        /**\r\n         * A value that specifies the list identifier of the list that contains\r\n         * the field to use as the lookup values.\r\n         */\r\n        lookupList: string;\r\n    }\r\n}","namespace Fx.SharePoint.Client {\r\n\r\n    export interface IListFieldMultiChoice extends IListField {\r\n    \r\n    }\r\n}","namespace Fx.SharePoint.Client {\r\n\r\n    export interface IListFieldMultiLineText extends IListField {\r\n\r\n    }\r\n}","namespace Fx.SharePoint.Client {\r\n\r\n    export interface IListFieldNumber extends IListField {\r\n\r\n        maximumValue: number;\r\n        minimumValue: number;\r\n    }\r\n}","namespace Fx.SharePoint.Client {\r\n\r\n    export interface IListFieldText extends IListField {\r\n\r\n        maxLength: number;\r\n    }\r\n}","namespace Fx.SharePoint.Client {\r\n\r\n    export interface IListFieldUniqueId extends IListField {\r\n    \r\n    }\r\n}","namespace Fx.SharePoint.Client {\r\n\r\n    export interface IListFieldUrl extends IListField {\r\n    \r\n    }\r\n}","namespace Fx.SharePoint.Client {\r\n\r\n    export interface IListFieldUser extends IListFieldLookup {\r\n        selectionMode: SP.FieldUserSelectionMode;\r\n    }\r\n}","namespace Fx.SharePoint.Client {\r\n\r\n    export class ListFieldBoolean extends ListField implements IListFieldBoolean {\r\n\r\n        //#region Fields\r\n\r\n        protected spField: SP.Field;\r\n\r\n        //#endregion - Fields\r\n\r\n        //#region Constructor\r\n\r\n        constructor(\r\n            field: SP.Field,\r\n            fieldConfig: IFieldConfig,\r\n            list: IList\r\n        ) {\r\n            super(field, fieldConfig, list);\r\n            this.setField(SP.Field);\r\n        }\r\n\r\n        //#endregion - Constructor\r\n\r\n        //#region Overrides\r\n\r\n        protected setValueOverride(item: IListItem, value: any): ng.IPromise<void> {\r\n            value = (value == null) ? value : !!value;\r\n            return super.setValueOverride(item, value);\r\n        }\r\n\r\n        //#endregion - Overrides\r\n    }\r\n}","namespace Fx.SharePoint.Client {\r\n\r\n    export class ListFieldDateTime extends ListField implements IListFieldDateTime {\r\n\r\n        //#region Fields\r\n\r\n        protected spField: SP.FieldDateTime;\r\n\r\n        //#endregion - Fields\r\n\r\n        //#region Constructor\r\n\r\n        constructor(\r\n            field: SP.Field,\r\n            fieldConfig: IFieldConfig,\r\n            list: IList\r\n        ) {\r\n            super(field, fieldConfig, list);\r\n            this.setField(SP.FieldDateTime);\r\n        }\r\n\r\n        //#endregion - Constructor\r\n\r\n        //#region Overrides\r\n\r\n        protected getValueOverride(item: IListItem): ng.IPromise<any> {\r\n            return super.getValueOverride(item).then(value => {\r\n                return value != null ? new Date(value) : null;\r\n            });\r\n        }\r\n\r\n        protected setValueOverride(item: IListItem, value: any): ng.IPromise<void> {\r\n            if (value != null && !(value instanceof Date)) {\r\n                this.getLogger(item).error(\r\n                    `Expect value is instance of type 'Date', but got '${typeof (value)}'.`\r\n                );\r\n            }\r\n\r\n            return super.setValueOverride(item, value);\r\n        }\r\n\r\n        //#endregion - Overrides\r\n    }\r\n}","namespace Fx.SharePoint.Client {\r\n\r\n    export class ListFieldLookup extends ListField implements IListFieldLookup {\r\n\r\n        //#region Fields\r\n\r\n        protected spField: SP.FieldLookup;\r\n\r\n        //#endregion - Fields\r\n\r\n        //#region Constructor\r\n\r\n        constructor(\r\n            field: SP.Field,\r\n            fieldConfig: IFieldConfig,\r\n            list: IList\r\n        ) {\r\n            super(field, fieldConfig, list);\r\n            this.setField(SP.FieldLookup);\r\n        }\r\n\r\n        //#endregion - Constructor\r\n\r\n        //#region Overrides\r\n\r\n        protected getValueOverride(item: IListItem): ng.IPromise<any> {\r\n            let result: ng.IPromise<IListItem | IListItem[]> | (IListItem | IListItem[]);\r\n            const sessionContext = this.get_list().get_serviceContext().getGetListItemSessionContext(item);\r\n            const value = item.get_spItem().get_item(this.internalName) as (SP.FieldLookupValue | SP.FieldLookupValue[]);\r\n\r\n            if (value == null) {\r\n                result = this.allowMultipleValues ? [] : null;\r\n            }\r\n            else {\r\n                result = this.allowMultipleValues\r\n                    ? $q().all(\r\n                        _.map(\r\n                            value as SP.FieldLookupValue[],\r\n                            v => sessionContext.getLookupItem(v.get_lookupId(), this.lookupList, [])\r\n                        )\r\n                    )\r\n                    : sessionContext.getLookupItem((value as SP.FieldLookupValue).get_lookupId(), this.lookupList, []);\r\n            }\r\n            \r\n            return $q().resolve(result);\r\n        }\r\n\r\n        //protected setValueOverride(item: IListItem, value: any): ng.IPromise<void> {\r\n        //    throw new Error(\"Not implemented\");\r\n        //}\r\n\r\n        //#endregion - Overrides\r\n\r\n        //#region IListFieldLookup\r\n\r\n        get allowMultipleValues(): boolean {\r\n            return this.spField.get_allowMultipleValues();\r\n        }\r\n\r\n        get lookupField(): string {\r\n            return this.spField.get_lookupField();\r\n        }\r\n\r\n        get lookupList(): string {\r\n            return this.spField.get_lookupList();\r\n        }\r\n\r\n        //#endregion - IListFieldLookup\r\n    }\r\n}","namespace Fx.SharePoint.Client {\r\n\r\n    export class ListFieldMultiLineText extends ListField implements IListFieldMultiLineText {\r\n\r\n        //#region Fields\r\n\r\n        protected spField: SP.FieldMultiLineText;\r\n\r\n        //#endregion - Fields\r\n\r\n        //#region Constructor\r\n\r\n        constructor(\r\n            field: SP.Field,\r\n            fieldConfig: IFieldConfig,\r\n            list: IList\r\n        ) {\r\n            super(field, fieldConfig, list);\r\n            this.setField(SP.FieldMultiLineText);\r\n        }\r\n\r\n        //#endregion - Constructor\r\n\r\n        //#region Overrides\r\n\r\n        protected getValueOverride(item: IListItem): ng.IPromise<any> {\r\n            const value = item.get_spItem().get_item(this.internalName) as string;\r\n            let result = value;\r\n\r\n            if (this.get_fieldConfig().json) {\r\n                try {\r\n                    result = JSON.parse(value);\r\n                }\r\n                catch (e) {\r\n                    this.getLogger(item).warn(\r\n                        `Error while parsing json field: '${e}'.`,\r\n                        {\r\n                            actual: value\r\n                        }\r\n                    );\r\n                    result = null;\r\n                }\r\n            }\r\n\r\n            return $q().resolve(result);\r\n        }\r\n\r\n        protected setValueOverride(item: IListItem, value: any): ng.IPromise<void> {\r\n            let result = value;\r\n\r\n            if (this.get_fieldConfig().json) {\r\n                try {\r\n                    result = JSON.stringify(value);\r\n                }\r\n                catch (e) {\r\n                    this.getLogger(item).warn(\r\n                        `Error while stringify json field: '${e}'.`,\r\n                        {\r\n                            actual: value\r\n                        }\r\n                    );\r\n\r\n                    // If error while stringifying json field -> leave field intact.\r\n                    return $q().resolve();\r\n                }\r\n            }\r\n\r\n            return super.setValueOverride(item, result);\r\n        }\r\n\r\n        //#endregion - Overrides\r\n    }\r\n}","namespace Fx.SharePoint.Client {\r\n\r\n    export class ListFieldNumber extends ListField implements IListFieldNumber {\r\n\r\n        //#region Fields\r\n\r\n        protected spField: SP.FieldNumber;\r\n\r\n        //#endregion - Fields\r\n\r\n        //#region Constructor\r\n\r\n        constructor(\r\n            field: SP.Field,\r\n            fieldConfig: IFieldConfig,\r\n            list: IList\r\n        ) {\r\n            super(field, fieldConfig, list);\r\n            this.setField(SP.FieldNumber);\r\n        }\r\n\r\n        //#endregion - Constructor\r\n\r\n        //#region Overrides\r\n\r\n        protected setValueOverride(item: IListItem, value: any): ng.IPromise<void> {\r\n            const numberValue = (value == null) ? null : parseFloat(value);\r\n\r\n            if (_.isNaN(numberValue)) {\r\n                this.getLogger(item).error(\r\n                    `Expect value is convertible to float, but got '${value}'.`\r\n                );\r\n            }\r\n\r\n            return super.setValueOverride(item, numberValue);\r\n        }\r\n\r\n        //#endregion - Overrides\r\n\r\n        //#region IListFieldText\r\n\r\n        get maximumValue(): number {\r\n            return this.spField.get_maximumValue();\r\n        }\r\n\r\n        get minimumValue(): number {\r\n            return this.spField.get_minimumValue();\r\n        }\r\n\r\n        //#endregion - IListFieldText\r\n    }\r\n}","namespace Fx.SharePoint.Client {\r\n\r\n    //#region Constants\r\n\r\n    /**\r\n     * SharePoint only allow you to set data of single line text field to\r\n     * string with length <= 255.\r\n     */\r\n    const MAX_TEXT_LENGTH = 255;\r\n\r\n    //#endregion - Constants\r\n\r\n    export class ListFieldText extends ListField implements IListFieldText {\r\n\r\n        //#region Fields\r\n\r\n        protected spField: SP.FieldText;\r\n\r\n        //#endregion - Fields\r\n\r\n        //#region Constructor\r\n\r\n        constructor(\r\n            field: SP.Field,\r\n            fieldConfig: IFieldConfig,\r\n            list: IList\r\n        ) {\r\n            super(field, fieldConfig, list);\r\n            this.setField(SP.FieldText);\r\n        }\r\n\r\n        //#endregion - Constructor\r\n\r\n        //#region Overrides\r\n\r\n        protected setValueOverride(item: IListItem, value: any): ng.IPromise<void> {\r\n            if (_.size(value) > MAX_TEXT_LENGTH) {\r\n                this.getLogger(item).error(\r\n                    `Expect value length <= '${MAX_TEXT_LENGTH}', but got '${_.size(value)}'.`\r\n                );\r\n            }\r\n            \r\n            return super.setValueOverride(item, value);\r\n        }\r\n\r\n        //#endregion - Overrides\r\n\r\n        //#region IListFieldText\r\n\r\n        get maxLength(): number {\r\n            return this.spField.get_maxLength();\r\n        }\r\n\r\n        //#endregion - IListFieldText\r\n    }\r\n}","namespace Fx.SharePoint.Client {\r\n\r\n    export class ListFieldUniqueId extends ListField implements IListFieldUniqueId {\r\n\r\n        //#region Overrides\r\n\r\n        protected getValueOverride(item: IListItem): ng.IPromise<any> {\r\n            const guid = item.get_spItem().get_item(this.internalName) as SP.Guid;\r\n            return $q().resolve(guid.toString());\r\n        }\r\n\r\n        protected setValueOverride(item: IListItem, value: any): ng.IPromise<void> {\r\n            const originalValue = item.getOriginalData(this);\r\n            if (value !== originalValue) {\r\n                this.getLogger(item).error(\r\n                    `This field is readonly, its value can not be set.`\r\n                );\r\n            }\r\n\r\n            return $q().resolve();\r\n        }\r\n\r\n        //#endregion - Overrides\r\n    }\r\n}","namespace Fx.SharePoint.Client {\r\n\r\n    export class ListFieldUrl extends ListField implements IListFieldUrl {\r\n\r\n        //#region Fields\r\n\r\n        protected spField: SP.FieldUrl;\r\n\r\n        //#endregion - Fields\r\n\r\n        //#region Constructor\r\n\r\n        constructor(\r\n            field: SP.Field,\r\n            fieldConfig: IFieldConfig,\r\n            list: IList\r\n        ) {\r\n            super(field, fieldConfig, list);\r\n            this.setField(SP.FieldUrl);\r\n        }\r\n\r\n        //#endregion - Constructor\r\n\r\n        //#region Overrides\r\n\r\n        protected getValueOverride(item: IListItem): ng.IPromise<IListFieldUrlValue> {\r\n            const value = item.get_spItem().get_item(this.internalName) as SP.FieldUrlValue;\r\n            const result = (value == null)\r\n                ? null\r\n                : factory().createListFieldUrlValue(value, this, item);\r\n\r\n            return $q().resolve(result);\r\n        }\r\n\r\n        protected setValueOverride(item: IListItem, value: any): ng.IPromise<void> {\r\n            if (value == null) {\r\n                return super.setValueOverride(item, null);\r\n            }\r\n\r\n            const url: string = (typeof value === \"string\") ? value : value.url;\r\n            const description: string = (typeof value === \"string\") ? value : value.description;\r\n\r\n            //#region Validate\r\n\r\n            if (!this.isValidUrl(url)) {\r\n                this.getLogger(item).error(\r\n                    `Url is not valid: '${url}'.`\r\n                );\r\n            }\r\n\r\n            //#endregion - Validate\r\n\r\n            const fieldUrlValue = factory().createSPFieldUrlValue(url, description);\r\n            return super.setValueOverride(item, fieldUrlValue);\r\n        }\r\n\r\n        /**\r\n         * Check if url and/or description has been changed?\r\n         */\r\n        protected isFieldValueChanged(newValue: SP.FieldUrlValue, originalValue: any) {\r\n            const newUrl = newValue && newValue.get_url();\r\n            const newDescription = newValue && newValue.get_description();\r\n\r\n            const originalUrl = originalValue && originalValue.url;\r\n            const originalDescription = originalValue && originalValue.description;\r\n\r\n            return (newUrl !== originalUrl) || (newDescription !== originalDescription);\r\n        }\r\n\r\n        //#endregion - Overrides\r\n\r\n        //#region Private Methods\r\n\r\n        private isValidUrl(url: string): boolean {\r\n            const regexp = /(ftp|http|https):\\/\\/(\\w+:{0,1}\\w*@)?(\\S+)(:[0-9]+)?(\\/|\\/([\\w#!:.?+=&%@!\\-\\/]))?/;\n            return regexp.test(url);\r\n        }\r\n\r\n        //#endregion - Private Methods\r\n    }\r\n}","namespace Fx.SharePoint.Client {\r\n\r\n    //#region Types\r\n\r\n    export type TFieldUserValue = SP.FieldUserValue | SP.FieldUserValue[];\r\n    export type TListFieldUserValue = IListFieldUserValue | IListFieldUserValue[];\r\n\r\n    //#endregion - Types\r\n\r\n    export class ListFieldUser extends ListFieldLookup implements IListFieldUser {\r\n\r\n        //#region Fields\r\n\r\n        protected spField: SP.FieldUser;\r\n\r\n        //#endregion - Fields\r\n\r\n        //#region Constructor\r\n\r\n        constructor(\r\n            field: SP.Field,\r\n            fieldConfig: IFieldConfig,\r\n            list: IList\r\n        ) {\r\n            super(field, fieldConfig, list);\r\n            this.setField(SP.FieldUser);\r\n        }\r\n\r\n        //#endregion - Constructor\r\n\r\n        //#region Overrides\r\n\r\n        protected getValueOverride(item: IListItem): ng.IPromise<IListFieldUserValue | IListFieldUserValue[]> {\r\n            let result: IListFieldUserValue | IListFieldUserValue[];\r\n            const value = item.get_spItem().get_item(this.internalName) as (SP.FieldUserValue | SP.FieldUserValue[]);\r\n\r\n            if (value == null) {\r\n                result = this.allowMultipleValues ? [] : null;\r\n            }\r\n            else {\r\n                result = this.allowMultipleValues\r\n                    ? _.map(\r\n                        value as SP.FieldUserValue[],\r\n                        v => factory().createListFieldUserValue(v, this, item)\r\n                    )\r\n                    : factory().createListFieldUserValue(value as SP.FieldUserValue, this, item);   \r\n            }\r\n\r\n            return $q().resolve(result);\r\n        }\r\n\r\n        protected setValueOverride(item: IListItem, value: any): ng.IPromise<void> {\r\n            if (value == null) {\r\n                return super.setValueOverride(item, null);\r\n            }\r\n\r\n            //#region Validate\r\n\r\n            if (this.allowMultipleValues && !(_.isArray(value) || value == null)) {\r\n                this.getLogger(item).error(\r\n                    `Expect value is an array, but got '${value}'.`\r\n                );\r\n            }\r\n\r\n            //#endregion - Validate\r\n            \r\n            return super.setValueInternal(\r\n                item,\r\n                this.allowMultipleValues\r\n                    ? this.createSPFieldUserValues(item, value)\r\n                    : this.createSPFieldUserValue(item, value)\r\n            );\r\n        }\r\n\r\n        /**\r\n         * Check if id has been changed?\r\n         */\r\n        protected isFieldValueChanged(newValue: TFieldUserValue, originalValue: TListFieldUserValue) {\r\n            const newIds = this.getIdFromSPFieldUserValue(newValue);\r\n            const originalIds = this.getIdFromListFieldUserValue(originalValue);\r\n\r\n            return !_.isEqual(newIds, originalIds);\r\n        }\r\n\r\n        //#endregion - Overrides\r\n\r\n        //#region Private Methods\r\n\r\n        private createSPFieldUserValue(item: IListItem, rawValue: any): SP.FieldUserValue {\r\n            const id: number = (typeof rawValue === \"number\") ? rawValue : rawValue.id;\r\n\r\n            //#region Validate\r\n\r\n            if (!(id > 0)) {\r\n                this.getLogger(item).error(\r\n                    `Expect user id is a positive integer, but got '${id}'.`\r\n                );\r\n            }\r\n\r\n            //#endregion - Validate\r\n\r\n            return factory().createSPFieldUserValue(id);\r\n        }\r\n\r\n        private createSPFieldUserValues(item: IListItem, rawValues: any): SP.FieldUserValue[] {\r\n            return _.chain(rawValues)\r\n                .filter((v: any) => v != null)\r\n                .map(v => this.createSPFieldUserValue(item, v))\r\n                .value();\r\n        }\r\n\r\n        private getIdFromSPFieldUserValue(userValue: TFieldUserValue): number[] {\r\n            const getId = (value: SP.FieldUserValue): number => {\r\n                return value == null\r\n                    ? null\r\n                    : value.get_lookupId();\r\n            };\r\n\r\n            return _.isArray(userValue)\r\n                ? _.map(userValue as SP.FieldUserValue[], v => getId(v))\r\n                : [getId(userValue as SP.FieldUserValue)];\r\n        }\r\n\r\n        private getIdFromListFieldUserValue(userValue: TListFieldUserValue): number[] {\r\n            const getId = (value: IListFieldUserValue): number => {\r\n                return value == null\r\n                    ? null\r\n                    : value.id;\r\n            };\r\n\r\n            return _.isArray(userValue)\r\n                ? _.map(userValue as IListFieldUserValue[], v => getId(v))\r\n                : [getId(userValue as IListFieldUserValue)];\r\n        }\r\n\r\n        //#endregion - Private Methods\r\n\r\n        //#region IListFieldUser\r\n\r\n        get selectionMode(): SP.FieldUserSelectionMode {\r\n            return this.spField.get_selectionMode();\r\n        }\r\n\r\n        //#endregion - IListFieldUser\r\n    }\r\n}","namespace Fx.SharePoint.Client {\r\n\r\n    export interface IListFieldLookupValue {\r\n        id: number;\r\n    }\r\n}","namespace Fx.SharePoint.Client {\r\n\r\n    export interface IListFieldLookupValuePrivateData {\r\n        itemValue: SP.FieldLookupValue;\r\n        itemField: IListFieldLookup;\r\n        listItem: IListItem;\r\n    }\r\n}","namespace Fx.SharePoint.Client {\r\n\r\n    export interface IListFieldUrlValue extends ICloneable {\r\n\r\n        url: string;\r\n        description: string;\r\n    }\r\n}","namespace Fx.SharePoint.Client {\r\n\r\n    export interface IListFieldUrlValuePrivateData {\r\n        urlValue: SP.FieldUrlValue;\r\n        urlField: IListFieldUrl;\r\n        listItem: IListItem;\r\n    }\r\n}","namespace Fx.SharePoint.Client {\r\n\r\n    export interface IListFieldUserValue extends IListFieldLookupValue {\r\n\r\n        title: string;\r\n    }\r\n}","namespace Fx.SharePoint.Client {\r\n\r\n    export interface IListFieldUserValuePrivateData extends IListFieldLookupValuePrivateData {\r\n        itemValue: SP.FieldUserValue;\r\n        itemField: IListFieldUser;\r\n    }\r\n}","namespace Fx.SharePoint.Client {\r\n\r\n    export class ListFieldLookupValue implements IListFieldLookupValue {\r\n\r\n        //#region Fields\r\n\r\n        protected $$private: IListFieldLookupValuePrivateData;\r\n\r\n        //#endregion - Fields\r\n\r\n        //#region Constructor\r\n\r\n        constructor(lookupValue: SP.FieldLookupValue, lookupField: IListFieldLookup, listItem: IListItem) {\r\n            this.$$private = factory().createListFieldLookupValuePrivateData(lookupValue, lookupField, listItem);\r\n        }\r\n\r\n        //#endregion - Constructor\r\n\r\n\r\n        //#region Private Methods\r\n\r\n        private enqueueToPendingChanges(): void {\r\n            this.$$private.listItem.get_parentList().get_serviceContext().addPending(this.$$private.listItem);\r\n        }\r\n\r\n        //#endregion - Private Methods\r\n\r\n        //#region IListFieldLookupValue\r\n\r\n        get id(): number {\r\n            return this.$$private.itemValue.get_lookupId();\r\n        }\r\n\r\n        set id(value: number) {\r\n            this.$$private.itemValue.set_lookupId(value);\r\n            this.enqueueToPendingChanges();\r\n        }\r\n        \r\n        //#endregion - IListFieldLookupValue\r\n    }\r\n}","namespace Fx.SharePoint.Client {\r\n\r\n    export class ListFieldLookupValuePrivateData implements IListFieldLookupValuePrivateData {\r\n\r\n        //#region Constructor\r\n\r\n        constructor(\r\n            public itemValue: SP.FieldLookupValue,\r\n            public itemField: IListFieldLookup,\r\n            public listItem: IListItem\r\n        ) {\r\n            \r\n        }\r\n\r\n        //#endregion - Constructor\r\n    }\r\n}","namespace Fx.SharePoint.Client {\r\n\r\n    export class ListFieldUrlValue implements IListFieldUrlValue, ICloneable {\r\n\r\n        //#region Fields\r\n\r\n        protected $$private: IListFieldUrlValuePrivateData;\r\n\r\n        //#endregion - Fields\r\n\r\n        //#region Constructor\r\n\r\n        constructor(urlValue: SP.FieldUrlValue, urlField: IListFieldUrl, listItem: IListItem) {\r\n            this.$$private = factory().createListFieldUrlValuePrivateData(urlValue, urlField, listItem);\r\n        }\r\n\r\n        //#endregion - Constructor\r\n\r\n        //#region Private Methods\r\n\r\n        private enqueueToPendingChanges(): void {\r\n            this.$$private.listItem.get_parentList().get_serviceContext().addPending(this.$$private.listItem);\r\n        }\r\n\r\n        //#endregion - Private Methods\r\n\r\n        //#region IListFieldUrlValue\r\n\r\n        get url(): string {\r\n            return this.$$private.urlValue.get_url();\r\n        }\r\n\r\n        set url(value: string) {\r\n            this.$$private.urlValue.set_url(value);\r\n            this.enqueueToPendingChanges();\r\n        }\r\n\r\n        get description(): string {\r\n            return this.$$private.urlValue.get_description();\r\n        }\r\n\r\n        set description(value: string) {\r\n            this.$$private.urlValue.set_description(value);\r\n            this.enqueueToPendingChanges();\r\n        }\r\n\r\n        //#endregion - IListFieldUrlValue\r\n\r\n        //#region ICloneable\r\n\r\n        clone(): any {\r\n            const newUrlValue = factory()\r\n                .createSPFieldUrlValue(this.url, this.description);\r\n\r\n            return factory().createListFieldUrlValue(\r\n                newUrlValue,\r\n                this.$$private.urlField,\r\n                this.$$private.listItem\r\n            );\r\n        }\r\n\r\n        //#endregion - ICloneable\r\n    }\r\n}","namespace Fx.SharePoint.Client {\r\n\r\n    export class ListFieldUrlValuePrivateData implements IListFieldUrlValuePrivateData {\r\n\r\n        //#region Constructor\r\n\r\n        constructor(\r\n            public urlValue: SP.FieldUrlValue,\r\n            public urlField: IListFieldUrl,\r\n            public listItem: IListItem\r\n        ) {\r\n            \r\n        }\r\n\r\n        //#endregion - Constructor\r\n    }\r\n}","namespace Fx.SharePoint.Client {\r\n\r\n    export class ListFieldUserValue extends ListFieldLookupValue implements IListFieldUserValue, ICloneable {\r\n\r\n        //#region Fields\r\n\r\n        protected $$private: IListFieldUserValuePrivateData;\r\n\r\n        //#endregion - Fields\r\n\r\n        //#region Constructor\r\n\r\n        constructor(userValue: SP.FieldUserValue, userField: IListFieldUser, listItem: IListItem) {\r\n            super(userValue, userField, listItem);\r\n            this.$$private = factory().createListFieldUserValuePrivateData(userValue, userField, listItem);\r\n        }\r\n\r\n        //#endregion - Constructor\r\n\r\n        //#region IListFieldUserValue\r\n\r\n        get title(): string {\r\n            return this.$$private.itemValue.get_lookupValue();\r\n        }\r\n\r\n        //#endregion - IListFieldUserValue\r\n\r\n        //#region IClonable\r\n\r\n        clone(): any {\r\n            return factory().createListFieldUserValue(\r\n                _.cloneDeep<SP.FieldUserValue>(this.$$private.itemValue),\r\n                this.$$private.itemField,\r\n                this.$$private.listItem\r\n            );\r\n        }\r\n\r\n        //#endregion - IClonable\r\n    }\r\n}","namespace Fx.SharePoint.Client {\r\n\r\n    export class ListFieldUserValuePrivateData extends ListFieldLookupValuePrivateData implements IListFieldUserValuePrivateData {\r\n\r\n        //#region Constructor\r\n\r\n        constructor(\r\n            public itemValue: SP.FieldUserValue,\r\n            public itemField: IListFieldUser,\r\n            public listItem: IListItem\r\n        ) {\r\n            super(itemValue, itemField, listItem);\r\n        }\r\n\r\n        //#endregion - Constructor\r\n    }\r\n}","namespace Fx.SharePoint.Client {\r\n\r\n    /**\r\n     * Nothing fancy.\r\n     */\r\n    export interface IListConfig extends IListConfigLiteral {\r\n    \r\n        fields: void | TFieldConfig;\r\n\r\n        /**\r\n         * These fields need boolean values to deplay initial IList.fields (when IList.initPromise resolved).\r\n         */\r\n        defaultFields: boolean | TFieldConfig;\r\n        userFields: boolean | TFieldConfig;\r\n\r\n        getList(): IList;\r\n    }\r\n}","namespace Fx.SharePoint.Client {\r\n\r\n    /**\r\n     * User config. Only use this interface in JavaScript code.\r\n     */\r\n    export interface IListConfigLiteral {\r\n\r\n        /**\r\n         * Display name of the list.\r\n         */\r\n        listName: string;\r\n\r\n        /**\r\n         * Include both auto defined and user defined field.\r\n         * **This will overwrite `defaultFields` and `userFields` if set.**\r\n         * @value\r\n         *  - {string}: only this field will be retrieved with default config\r\n         *  - {INamedFieldConfigLiteral}: only this field will be retrieved with specified config\r\n         *  - {Array<>}: only these fields will be retrieved with default/specified config\r\n         *  - {Object}: Fields have internal names equal to this object keys will be overwrite\r\n         *      - {true}: field will be add/overwrite with default config\r\n         *      - {false}: field will not be retrieved\r\n         *      - {IFieldConfigLiteral}: field will be overwrite with specified config\r\n         * @defaultValue null\r\n         */\r\n        fields?: void | TFieldConfigLiteral;\r\n\r\n        /**\r\n         * These fields are fields defined by the list (auto defined).\r\n         * @value\r\n         *  - {false}: default fields will not retrieved\r\n         *  - {true}: use ListBase.defaultFields\r\n         *  - {Object}: overwrite ListBase.defaultFields config\r\n         *  - others: retrieve specified fields. Specify user defined field in this property will not have any effect.\r\n         * @defaultValue true\r\n         */\r\n        defaultFields?: boolean | TFieldConfigLiteral;\r\n\r\n        /**\r\n         * These fields are fields defined by the user.\r\n         * @value\r\n         *  - {false}: all user defined will not retrieved\r\n         *  - {true}: all user defined field\r\n         *  - {Object}: overwrite any specified user defined field\r\n         *  - others: retrieve specific field. Specify auto defined field in this property will not have any effect.\r\n         * @defaultValue true\r\n         */\r\n        userFields?: boolean | TFieldConfigLiteral;\r\n    }\r\n}","namespace Fx.SharePoint.Client {\r\n\r\n    //#region Constants\r\n\r\n    const DEFAULT_CONFIGS: IListConfigLiteral = {\r\n        listName: undefined,\r\n        fields: null,\r\n        defaultFields: true,\r\n        userFields: true\r\n    };\r\n\r\n    //#endregion - Constants\r\n\r\n    /**\r\n     * Nothing fancy.\r\n     */\r\n    export class ListConfig implements IListConfig {\r\n\r\n        //#region Constructor\r\n\r\n        constructor(\r\n            private configLiteral: IListConfigLiteral,\r\n            private list: IList\r\n        ) {\r\n            this.configLiteral = _.defaultsDeep({}, configLiteral, DEFAULT_CONFIGS) as IListConfigLiteral;\r\n\r\n            //#region Validate\r\n\r\n            if (!this.configLiteral.listName && !_.isString(this.configLiteral.listName)) {\r\n                this.logger.error(`Expect 'config.listName' is a string, but got '${configLiteral.listName}'.`);\r\n            }\r\n\r\n            //#endregion - Validate\r\n            \r\n            this.refreshConfigValue();\r\n        }\r\n\r\n        //#endregion - Constructor\r\n\r\n        //#region Properties\r\n\r\n        private get contextUrl(): string {\r\n            return this.getList().get_serviceContext().clientContext.get_url();\r\n        }\r\n\r\n        private get logger(): ILogger {\r\n            return factory().createLogger({\r\n                listName: this.listName, // this does not existed until set in constructor.\r\n                contextUrl: this.contextUrl\r\n            });\r\n        }\r\n\r\n        //#endregion - Properties\r\n\r\n        //#region Private Methods\r\n\r\n        /**\r\n         * Preserve bool value.\r\n         * @param config\r\n         */\r\n        private getBoolableFieldConfig(config: any): boolean | TFieldConfig {\r\n            return (typeof config === \"boolean\")\r\n                ? config\r\n                : this.getFieldConfig(config);\r\n        }\r\n\r\n        /**\r\n         * Convert to array or hash config.\r\n         * @param config\r\n         */\r\n        private getFieldConfig(config: any): TFieldConfig {\r\n            try {\r\n                // Complicated! Array is also an object!\r\n                return (_.isArray(config) || !_.isObjectLike(config))\r\n                    ? factory().createArrayFieldConfig(config, this)\r\n                    : factory().createHashFieldConfig(config, this);                \r\n            }\r\n            catch (e) {\r\n                if (e instanceof FieldConfigCreationException) {\r\n                    const error = e as FieldConfigCreationException;\r\n                    this.logger.error(\r\n                        error.message,\r\n                        {\r\n                            creationContext: {\r\n                                fieldName: error.fieldName\r\n                            }\r\n                        }\r\n                    );\r\n                }\r\n                else {\r\n                    throw e;\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Removed?\r\n         * @param fieldConfigs\r\n         */\r\n        private validateDuplicateFields(fieldConfigs: TFieldConfig): void {\r\n            const fields = _.isArray(fieldConfigs)\r\n                ? fieldConfigs as IFieldConfig[]\r\n                : _.values<IFieldConfig>(fieldConfigs);\r\n\r\n            _.forEach(fields, field => {\r\n                if (_.filter(fields, f => f.name === field.name).length > 1) {\r\n                    this.logger.error(`Duplicated field config for field '${field.name}'.`);\r\n                }\r\n            });\r\n        }\r\n\r\n        /**\r\n         * Refresh.\r\n         */\r\n        private refreshConfigValue(): void {\r\n            this.listName = this.configLiteral.listName;\r\n\r\n            this.fields = this.configLiteral.fields == null\r\n                ? null\r\n                : this.getFieldConfig(this.configLiteral.fields);\r\n\r\n            this.defaultFields = this.getBoolableFieldConfig(this.configLiteral.defaultFields);\r\n            this.userFields = this.getBoolableFieldConfig(this.configLiteral.userFields);\r\n\r\n            this.validateConfigValue();\r\n        }\r\n\r\n        /**\r\n         * Validate.\r\n         */\r\n        private validateConfigValue(): void {\r\n            if (this.fields != null) {\r\n                this.validateDuplicateFields(this.fields as TFieldConfig);\r\n            }\r\n\r\n            if (!_.isBoolean(this.defaultFields)) {\r\n                this.validateDuplicateFields(this.defaultFields as TFieldConfig);\r\n            }\r\n\r\n            if (!_.isBoolean(this.userFields)) {\r\n                this.validateDuplicateFields(this.userFields as TFieldConfig);\r\n            }\r\n        }\r\n\r\n        //#endregion - Private Methods\r\n\r\n        //#region IListConfig\r\n\r\n        listName: string;\r\n\r\n        fields: void | TFieldConfig;\r\n        defaultFields: boolean | TFieldConfig;\r\n        userFields: boolean | TFieldConfig;\r\n\r\n        getList(): IList {\r\n            return this.list;\r\n        }\r\n\r\n        //#endregion - IListConfig\r\n    }\r\n}","namespace Fx.SharePoint.Client {\r\n\r\n    export type TFieldConfig = IFieldConfig[] | TFieldHashConfig;\r\n}","namespace Fx.SharePoint.Client {\r\n\r\n    export type TFieldConfigLiteral = TIndexdedFieldConfigLiteral | TKeyedFieldConfigLiteral;\r\n}","namespace Fx.SharePoint.Client {\r\n\r\n    export type TFieldHashConfig = { [key: string]: IFieldConfig };\r\n}","namespace Fx.SharePoint.Client {\r\n\r\n    export type TIndexdedFieldConfigLiteral = (string | INamedFieldConfigLiteral)[];\r\n}","namespace Fx.SharePoint.Client {\r\n\r\n    /**\r\n     * Hash object type is `overwrite` mode. It will overwrite default settings.\r\n     * - for `fields`: overwrite default of `defaultFields` + default of `userFields`\r\n     * - for `defaultFields`: overwrite default of `ListBase.defaultFields`\r\n     * - for `userFields`: overwrite (not add, because all user defined fields are retrieved by default)\r\n     *                     default of any user defined field\r\n     */\r\n    export type TKeyedFieldConfigLiteral = { [key: string]: boolean | IFieldConfigLiteral };\r\n}","","namespace Fx {\r\n    finalizeClass();\r\n}"],"sourceRoot":"/source/"}